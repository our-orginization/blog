<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daisy &amp; Will</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://our-orginization.github.io/"/>
  <updated>2018-02-08T08:55:53.000Z</updated>
  <id>http://our-orginization.github.io/</id>
  
  <author>
    <name>Daisy &amp;&amp; Will</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript常见问题汇总（一）</title>
    <link href="http://our-orginization.github.io/2018/01/16/javascript%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://our-orginization.github.io/2018/01/16/javascript常见问题汇总（一）/</id>
    <published>2018-01-15T16:00:00.000Z</published>
    <updated>2018-02-08T08:55:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文用于记录平时浏览资料或者工作过程中遇到的js关键知识点。</p><a id="more"></a><h2 id="类型和类型转换"><a href="#类型和类型转换" class="headerlink" title="类型和类型转换"></a>类型和类型转换</h2><p>在JavaScript中有7个内置类型：null，undefined，boolean，number，string，object，和symbol(ES6)。<br>除了object外，其他的都叫做基本类型，可以通过typeof查看对应数据的类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typeof 0              // &quot;number&quot;</div><div class="line">typeof true           // &quot;boolean&quot;</div><div class="line">typeof &apos;hi&apos;           // &quot;string&quot;</div><div class="line">typeof Math           // &quot;object&quot;</div><div class="line">typeof null           // &quot;object&quot;</div><div class="line">typeof Symbol(&apos;Hi&apos;)   // &quot;symbol&quot;</div></pre></td></tr></table></figure></p><h3 id="Null-vs-undefined"><a href="#Null-vs-undefined" class="headerlink" title="Null vs. undefined"></a>Null vs. undefined</h3><p>大多数计算机语言，有且仅有一个表示”无”的值，比如，C语言的NULL，Java语言的null，Python语言的None，Ruby语言的nil。<br>有点奇怪的是，JavaScript语言居然有两个表示”无”的值：undefined和null。<br><strong>相似性</strong><br>在JavaScript中，将一个变量赋值为undefined或null，老实说，几乎没区别。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</div></pre></td></tr></table></figure></p><p>上面代码中，a变量分别被赋值为undefined和null，这两种写法几乎等价。<br>undefined和null在if语句中，都会被自动转为false，相等运算符甚至直接报告两者相等。<br><strong>差别</strong><br><strong>null表示”没有对象”，即该处不应该有值。</strong> </p><ul><li>作为函数的参数，表示该函数的参数不是对象。</li><li>作为对象原型链的终点。<br><strong>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。</strong></li><li>变量被声明了，但没有赋值时，就等于undefined。</li><li>调用函数时，应该提供的参数没有提供，该参数等于undefined。</li><li>对象没有赋值的属性，该属性的值为undefined。</li><li>函数没有返回值时，默认返回undefined。</li></ul><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>在if语句的条件判断中，””，0， null，undefined, NaN, false 会自动转换为false。其它的如空数组、对象、函数定义都会自动转换为真。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Boolean(null)         // false</div><div class="line">Boolean(&apos;hello&apos;)      // true </div><div class="line">Boolean(&apos;0&apos;)          // true </div><div class="line">Boolean(&apos; &apos;)          // true </div><div class="line">Boolean([])           // true </div><div class="line">Boolean(function()&#123;&#125;) // true</div></pre></td></tr></table></figure></p><h3 id="String-amp-Number之间的转换"><a href="#String-amp-Number之间的转换" class="headerlink" title="String &amp; Number之间的转换"></a>String &amp; Number之间的转换</h3><p>首先你要非常小心的是 + 操作符。因为它同时用于数字相加和字符串拼接。<br>*,/,-只用于数字运算，当这些操作符和字符串一起使用，那么字符串会被强制转换为数字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1 + &quot;2&quot; = &quot;12&quot;</div><div class="line">&quot;&quot; + 1 + 0 = &quot;10&quot;</div><div class="line">&quot;&quot; - 1 + 0 = -1</div><div class="line">&quot;-9\n&quot; + 5 = &quot;-9\n5&quot;</div><div class="line">&quot;-9\n&quot; - 5 = -14</div><div class="line">&quot;2&quot; * &quot;3&quot; = 6</div><div class="line">4 + 5 + &quot;px&quot; = &quot;9px&quot;</div><div class="line">&quot;$&quot; + 4 + 5 = &quot;$45&quot;</div><div class="line">&quot;4&quot; - 2 = 2</div><div class="line">&quot;4px&quot; - 2 = NaN</div><div class="line">null + 1 = 1</div></pre></td></tr></table></figure></p><h3 id="vs"><a href="#vs" class="headerlink" title="== vs. ==="></a>== vs. ===</h3><p>一个广泛被接受的认知就是：==判断值是否相等，===同时判断值是否相等和类型是否相同。但是，这里有些误解。<br>实际上，==在验证相等性的时候，会对类型不同的值做一个类型转换。===对要判断的值不做类型转换。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">2 == &apos;2&apos;            // True</div><div class="line">2 === &apos;2&apos;           // False</div><div class="line">undefined == null   // True</div><div class="line">undefined === null  // False</div><div class="line">&apos;0&apos; == false        // true</div><div class="line">false == &quot;&quot;         // true</div><div class="line">false == []         // true</div><div class="line">false == &#123;&#125;         // false</div><div class="line">&quot;&quot; == 0             // true</div><div class="line">&quot;&quot; == []            // true</div><div class="line">&quot;&quot; == &#123;&#125;            // false</div><div class="line">0 == []             // true</div><div class="line">0 == &#123;&#125;             // false</div><div class="line">0 == null           // false</div></pre></td></tr></table></figure></p><h3 id="值-vs-引用"><a href="#值-vs-引用" class="headerlink" title="值 vs. 引用"></a>值 vs. 引用</h3><p>对于基本类型的值，赋值是通过值拷贝的形式；比如：null，undefined，boolean，number，string和ES6的symbol。<br>对于复杂类型的值，通过引用拷贝的形式赋值。比如：对象、对象包括数组和函数。如果想对复杂类型的值进行拷贝，需要自己去对子元素进行拷贝。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">2</span>;        <span class="comment">// 'a' hold a copy of the value 2.</span></div><div class="line"><span class="keyword">var</span> b = a;        <span class="comment">// 'b' is always a copy of the value in 'a'</span></div><div class="line">b++;</div><div class="line"><span class="built_in">console</span>.log(a);   <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(b);   <span class="comment">// 3</span></div><div class="line"><span class="keyword">var</span> c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> d = c;        <span class="comment">// 'd' is a reference to the shared value</span></div><div class="line">d.push( <span class="number">4</span> );      <span class="comment">// Mutates the referenced value (object)</span></div><div class="line"><span class="built_in">console</span>.log(c);   <span class="comment">// [1,2,3,4]</span></div><div class="line"><span class="built_in">console</span>.log(d);   <span class="comment">// [1,2,3,4]</span></div><div class="line"><span class="comment">/* Compound values are equal by reference */</span></div><div class="line"><span class="keyword">var</span> e = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log(c === d);  <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(c === e);  <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> copy = c.slice()    <span class="comment">// 'copy' 即使copy和c相同，但是copy指向新的值</span></div><div class="line"><span class="built_in">console</span>.log(c);           <span class="comment">// [1,2,3,4]</span></div><div class="line"><span class="built_in">console</span>.log(copy);        <span class="comment">// [1,2,3,4]</span></div><div class="line"><span class="built_in">console</span>.log(c === copy);  <span class="comment">// false</span></div></pre></td></tr></table></figure></p><h2 id="作用域-Scope"><a href="#作用域-Scope" class="headerlink" title="作用域(Scope)"></a>作用域(Scope)</h2><p>作用域值程序的执行环境，它包含了在当前位置可访问的变量和函数。<br><strong>全局作用域</strong>是最外层的作用域，在函数外面定义的变量属于全局作用域，可以被任何其他子作用域访问。在浏览器中，window对象就是全局作用域。<br><strong>局部作用域</strong>是在函数内部的作用域。在局部作用域定义的变量只能在该作用域以及其子作用域被访问。</p><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>在编译过程中，将var和function的定义移动到他们作用域最前面的行为叫做提升。<br><strong>整个函数定义会被提升</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(toSquare(<span class="number">3</span>));  <span class="comment">// 9</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">toSquare</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> n*n;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>变量只会被部分提升(let和const不会被提升)。而且只有变量的声明会被提升，赋值不会动</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;  <span class="comment">/* Original code */</span></div><div class="line">  <span class="built_in">console</span>.log(i);  <span class="comment">// undefined</span></div><div class="line">  <span class="keyword">var</span> i = <span class="number">10</span></div><div class="line">  <span class="built_in">console</span>.log(i);  <span class="comment">// 10</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;  <span class="comment">/* Compilation phase */</span></div><div class="line">  <span class="keyword">var</span> i;</div><div class="line">  <span class="built_in">console</span>.log(i);  <span class="comment">// undefined</span></div><div class="line">  i = <span class="number">10</span></div><div class="line">  <span class="built_in">console</span>.log(i);  <span class="comment">// 10</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// ES6 let &amp; const</span></div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(i);  <span class="comment">// ReferenceError: i is not defined</span></div><div class="line">  <span class="keyword">const</span> i = <span class="number">10</span></div><div class="line">  <span class="built_in">console</span>.log(i);  <span class="comment">// 10</span></div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">  <span class="built_in">console</span>.log(i);  <span class="comment">// ReferenceError: i is not defined</span></div><div class="line">  <span class="keyword">let</span> i = <span class="number">10</span></div><div class="line">  <span class="built_in">console</span>.log(i);  <span class="comment">// 10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="函数表达式和函数声明"><a href="#函数表达式和函数声明" class="headerlink" title="函数表达式和函数声明"></a>函数表达式和函数声明</h3><ul><li><p>函数表达式<br>一个函数表达式是在函数执行到函数表达式定义的位置才开始创建，并被使用。它不会被提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>函数声明<br>函数声明的函数可以在文件中任意位置调用，因为它会被提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>立即执行函数<br>立即执行函数，正如它的名字，就是创建函数的同时立即执行。它没有绑定任何事件，也无需等待任何异步操作,包围它的一对括号将其转换为一个表达式，紧跟其后的一对括号调用了这个函数。显而易见，它不会被提升。<br>立即执行函数可以用来实现模块化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     <span class="comment">// 代码</span></div><div class="line">     <span class="comment">// ...</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure></li></ul><h3 id="变量let-var-const"><a href="#变量let-var-const" class="headerlink" title="变量let,var,const"></a>变量let,var,const</h3><ul><li>在ES6之前，只能使用var来声明变量。在一个函数体中声明的变量和函数，周围的作用域内无法访问。在块作用域if和for中声明的变量，可以在if和for的外部被访问。如果没有使用var,let或则const关键字声明的变量将会绑定到全局作用域上。</li><li>ES6的let和const都是新引入的关键字。它们不会被提升，而且是块作用域。也就是说被大括号包围起来的区域声明的变量外部将不可访问。</li><li>使用const声明的变量，其值不可更改。准确地说它不可以被重新赋值，但是可以更改。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> tryMe = <span class="string">'initial assignment'</span>;</div><div class="line">tryMe = <span class="string">'this has been reassigned'</span>;  <span class="comment">// TypeError: Assignment to constant variable.</span></div><div class="line"><span class="comment">// You cannot reassign but you can change it…</span></div><div class="line"><span class="keyword">const</span> array = [<span class="string">'Ted'</span>, <span class="string">'is'</span>, <span class="string">'awesome!'</span>];</div><div class="line">array[<span class="number">0</span>] = <span class="string">'Barney'</span>;</div><div class="line">array[<span class="number">3</span>] = <span class="string">'Suit up!'</span>;</div><div class="line"><span class="built_in">console</span>.log(array);     <span class="comment">// [“Barney”, “is”, “awesome!”, “Suit up!”]</span></div><div class="line"><span class="keyword">const</span> airplane = &#123;&#125;;</div><div class="line">airplane.wings = <span class="number">2</span>;</div><div class="line">airplane.passengers = <span class="number">200</span>;</div><div class="line"><span class="built_in">console</span>.log(airplane);   <span class="comment">// &#123;passengers: 200, wings: 2&#125;</span></div></pre></td></tr></table></figure></li></ul><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>在前端面试中，闭包基本上是一个必问基础知识，然而一直以来我对闭包的理解都处于表面。<br>那么什么是闭包呢？<br>对于闭包(closure)，当外部函数返回之后，内部函数依然可以访问外部函数的变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> N = <span class="number">0</span>; <span class="comment">// N是f1中的局部变量</span></div><div class="line"></div><div class="line">    <span class="comment">// 内部函数f2中使用了外部函数f1中的变量N</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        N += <span class="number">1</span>;</div><div class="line">        <span class="built_in">console</span>.log(N);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = f1();</div><div class="line"></div><div class="line">result(); <span class="comment">// 输出1</span></div><div class="line">result(); <span class="comment">// 输出2</span></div><div class="line">result(); <span class="comment">// 输出3</span></div></pre></td></tr></table></figure></p><p>代码中，外部函数f1只执行了一次，变量N设为0，并将内部函数f2赋值给了变量result。由于外部函数f1已经执行完毕，其内部变量N应该在内存中被清除，然而事实并不是这样：我们每次调用result的时候，发现变量N一直在内存中，并且在累加。为什么呢？这就是闭包的神奇之处了！</p><h3 id="使用闭包定义私有变量"><a href="#使用闭包定义私有变量" class="headerlink" title="使用闭包定义私有变量"></a>使用闭包定义私有变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">var</span> name;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        name = value;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Product();</div><div class="line">p.setName(<span class="string">"hello"</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">// 输出undefined</span></div><div class="line"><span class="built_in">console</span>.log(p.getName()); <span class="comment">// 输出hello</span></div></pre></td></tr></table></figure><p>对象p的的name属性为私有属性，使用p.name不能直接访问。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>JavaScript仅支持通过prototype属性进行继承属性和方法。每个JavaScript构造函数都有一个prototype属性，用于设置所有实例对象需要共享的属性和方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params">x, y</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">this</span>._length = x;</div><div class="line">    <span class="keyword">this</span>._breadth = y;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Rectangle.prototype.getDimensions = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        length: <span class="keyword">this</span>._length,</div><div class="line">        breadth: <span class="keyword">this</span>._breadth</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">4</span>);</div><div class="line"><span class="keyword">var</span> y = <span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(x.getDimensions()); <span class="comment">// &#123; length: 3, breadth: 4 &#125;</span></div><div class="line"><span class="built_in">console</span>.log(y.getDimensions()); <span class="comment">// &#123; length: 4, breadth: 3 &#125;</span></div></pre></td></tr></table></figure></p><h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>我们可以一次性传入多个参数调用它；也可以只传入一部分参数来调用它，让它返回一个函数去处理剩下的参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> x + y;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)(<span class="number">1</span>)); <span class="comment">// 输出2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> add1 = add(<span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(add1(<span class="number">1</span>)); <span class="comment">// 输出2</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> add10 = add(<span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(add10(<span class="number">1</span>)); <span class="comment">// 输出11</span></div></pre></td></tr></table></figure></p><h2 id="apply-call-amp-bind"><a href="#apply-call-amp-bind" class="headerlink" title="apply, call &amp; bind"></a>apply, call &amp; bind</h2><p>apply, call 和 bind的共同点是第一个参数都是this，即函数运行时依赖的上下文。<br>其中，call方法是最简单的，它等价于指定this值调用函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = &#123;<span class="attr">name</span>: <span class="string">'daisy'</span>, <span class="attr">whatsyourname</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)&#125;&#125;;</div><div class="line"></div><div class="line">user.whatsyourname()</div><div class="line"><span class="comment">// daisy</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> user2 = &#123;<span class="attr">name</span>: <span class="string">'Daisy'</span>&#125;;</div><div class="line">user.whatsyourname.call(user2)</div><div class="line"><span class="comment">// Daisy</span></div></pre></td></tr></table></figure></p><p>applyf和call方法类似，不同的是，apply方法使用数组指定参数，而call方法每个参数单独需要指定：</p><ul><li>apply(thisArg, [argsArray])</li><li>call(thisArg, arg1, arg2, …)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = &#123;<span class="attr">greet</span>:<span class="string">'Hello'</span>, <span class="attr">sayhi</span>:<span class="function"><span class="keyword">function</span>(<span class="params">userName</span>) </span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.greet + <span class="string">' '</span> + userName)&#125;&#125;;</div><div class="line"></div><div class="line">user.sayhi(<span class="string">'Daisy'</span>);</div><div class="line"><span class="comment">//  Hello Daisy</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> greet1 = &#123;</div><div class="line">    greet: <span class="string">"Hi"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">user.sayhi.apply(greet1, <span class="string">'daisy'</span>);</div><div class="line"><span class="comment">// Uncaught TypeError: CreateListFromArrayLike called on non-object at &lt;anonymous&gt;:1:12 (anonymous) @ VM453:1</span></div><div class="line"></div><div class="line">user.sayhi.apply(greet1, [<span class="string">'daisy'</span>]);</div><div class="line"><span class="comment">// Hi daisy</span></div><div class="line"></div><div class="line">user.sayhi.call(greet1, <span class="string">'daisy'</span>);</div><div class="line"><span class="comment">// Hi daisy</span></div></pre></td></tr></table></figure></li></ul><p>使用bind方法，可以为函数绑定this值，然后作为一个新的函数返回：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = &#123;</div><div class="line">     greet: <span class="string">"pu!"</span>,</div><div class="line">     greetUser: <span class="function"><span class="keyword">function</span>(<span class="params">userName</span>) </span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.greet + <span class="string">" "</span> + userName);</div><div class="line">     &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> greetHi= user.greetUser.bind(&#123;<span class="attr">greet</span>: <span class="string">"Hi"</span>&#125;);</div><div class="line"><span class="keyword">var</span> greetHello = user.greetUser.bind(&#123;<span class="attr">greet</span>: <span class="string">"Hello"</span>&#125;);</div><div class="line"></div><div class="line">greetHi(<span class="string">"Daisy"</span>);</div><div class="line"><span class="comment">// Hi Daisy</span></div><div class="line"></div><div class="line">greetHello(<span class="string">"Daisy"</span>);</div><div class="line"><span class="comment">// Hello Daisy</span></div></pre></td></tr></table></figure></p><h2 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h2><p>Memoization用于优化比较耗时的计算，通过将计算结果缓存到内存中，这样对于同样的输入值，下次只需要中内存中读取结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">memoizeFunction</span>(<span class="params">func</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">var</span> key = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span> (cache[key])</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> cache[key];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">var</span> val = func.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line">            cache[key] = val;</div><div class="line">            <span class="keyword">return</span> val;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> fibonacci = memoizeFunction(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">return</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) ? n : fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">100</span>)); <span class="comment">// 输出354224848179262000000</span></div><div class="line"><span class="built_in">console</span>.log(fibonacci(<span class="number">100</span>)); <span class="comment">// 输出354224848179262000000</span></div></pre></td></tr></table></figure></p><p>代码中，第2次计算fibonacci(100)则只需要在内存中直接读取结果。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文用于记录平时浏览资料或者工作过程中遇到的js关键知识点。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://our-orginization.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://our-orginization.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript常见问题汇总（二）</title>
    <link href="http://our-orginization.github.io/2018/01/16/javascript%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://our-orginization.github.io/2018/01/16/javascript常见问题汇总（二）/</id>
    <published>2018-01-15T16:00:00.000Z</published>
    <updated>2018-02-09T03:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文为日常开发过程中HTML和JS基本调试方法汇总。</p><a id="more"></a><h2 id="快速进入对着页面任何元素-Elements"><a href="#快速进入对着页面任何元素-Elements" class="headerlink" title="快速进入对着页面任何元素(Elements)"></a>快速进入对着页面任何元素(Elements)</h2><ul><li>点击右键，选择“检查”</li><li>使用Ctrl+Shift+I(Mac:cmd+option+i)打开开发者面板，选择元素(Elements)标签。Element标签的方法</li></ul><h2 id="元素-Elements-标签的左侧"><a href="#元素-Elements-标签的左侧" class="headerlink" title="元素(Elements)标签的左侧"></a>元素(Elements)标签的左侧</h2><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><p>DOM树可以通过点击左边的小三角展开或收起，便于查看DOM元素树。<br>点击鼠标右键，会有更多的选择：</p><ul><li>Add attribute - 对选中的元素添加新的属性</li><li>Edit attribute - 编辑某个属性，当你鼠标在某个属性上方点击右键时方才显示。</li><li>Edit as HTML — 你可以编辑整个HTML；如果你想把元素的一部分拷贝使用，这样操作也很方便。</li><li>Copy outerHTML — 将整个标签及其内容拷贝。</li><li>Copy selector — 拷贝CSS选择器(div &gt; span &gt; #id)</li><li>Copy XPath — 拷贝XPath </li><li>Cut element — 剪切元素</li><li>Copy element — 拷贝元素</li><li>Hide element — 通过添加display:none来临时性地隐藏元素；(cmd+H/Ctrl+H)</li><li>Delete element — 删除元素，可以使用cmd+z来取消删除</li><li>Expand all — 将所有节点展开</li><li>Collapse all — 将所有节点折叠</li><li>:active — 将元素设置为active状态*</li><li>:hover — 将元素设置为hover状态*</li><li>:focus — 将元素设置为focus状态*</li><li>:visited — 将元素设置为已访问状态*</li><li>Scroll into view — 将网页快速滑动到元素所在位置</li><li>Break on… -&gt;subtree modification — 在子节点被修改的时候中断执行</li><li>Break on… -&gt;attribute modification — 在属性被修改的时候中断执行<h3 id="元素快速定位"><a href="#元素快速定位" class="headerlink" title="元素快速定位"></a>元素快速定位</h3><img src="https://p0.meituan.net/dpnewvc/ecba775f4acec4e87c97e13be34672ff478.png"><br>点击该图标，然后在页面上选中元素，DOM tree就会快速定位到该元素的源代码位置。<h3 id="捕获节点截图"><a href="#捕获节点截图" class="headerlink" title="捕获节点截图"></a>捕获节点截图</h3>一个很酷的技巧就是你可以将选中的节点生成一张png图片：<br>点击鼠标左键选中元素，使用 Cmd+Shift+P/Ctrl+Shift+P打开命令输入窗口，输入node screenshot，选中 Capture node screenshot，将会生成一张PNG图片。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为日常开发过程中HTML和JS基本调试方法汇总。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://our-orginization.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://our-orginization.github.io/tags/javascript/"/>
    
      <category term="调试" scheme="http://our-orginization.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
      <category term="HTML" scheme="http://our-orginization.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Chrome在电脑上模拟微信浏览器</title>
    <link href="http://our-orginization.github.io/2018/01/16/Chrome%E5%9C%A8%E7%94%B5%E8%84%91%E4%B8%8A%E6%A8%A1%E6%8B%9F%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    <id>http://our-orginization.github.io/2018/01/16/Chrome在电脑上模拟微信浏览器/</id>
    <published>2018-01-15T16:00:00.000Z</published>
    <updated>2018-02-08T07:21:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了微信商城的开发，涉及到在微信内部的页面跳转问题，用此方法调试。</p><a id="more"></a><p>1、先了解安卓微信和Ios微信的UA（User agent：用户代理）</p><p>安卓微信UA： mozilla/5.0 (linux; u; android 4.1.2; zh-cn; mi-one plus build/jzo54k) applewebkit/534.30 (khtml, like gecko) version/4.0 mobile safari/534.30 micromessenger/5.0.1.352  </p><p>2、打开Chrome，F12打开开发人员工具，点击菜单按钮—–More Tools —–Network condition打开Network condition窗口</p><p>3、 User agent选项，选择Custom（自定义），然后在下面的文本框中输入Android或者Ios的UA就可以了</p><p>4、测试一下成果如何<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">window.onload = function() &#123;</div><div class="line">    isWeixinBrowser();</div><div class="line">&#125;</div><div class="line">//判断是否微信浏览器</div><div class="line">function isWeixinBrowser() &#123;  </div><div class="line">    var ua = navigator.userAgent.toLowerCase();  </div><div class="line">    var result = (/micromessenger/.test(ua)) ? true : false;</div><div class="line">    if (result) &#123;</div><div class="line">        console.log(&apos;你正在访问微信浏览器&apos;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        console.log(&apos;你访问的不是微信浏览器&apos;);</div><div class="line">    &#125;</div><div class="line">    return result;</div><div class="line">&#125;  </div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了微信商城的开发，涉及到在微信内部的页面跳转问题，用此方法调试。&lt;/p&gt;
    
    </summary>
    
      <category term="chrome" scheme="http://our-orginization.github.io/categories/chrome/"/>
    
    
      <category term="chrome" scheme="http://our-orginization.github.io/tags/chrome/"/>
    
      <category term="调试" scheme="http://our-orginization.github.io/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Flex实现五种常用布局</title>
    <link href="http://our-orginization.github.io/2018/01/09/Flex%E5%AE%9E%E7%8E%B0%E4%BA%94%E7%A7%8D%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80/"/>
    <id>http://our-orginization.github.io/2018/01/09/Flex实现五种常用布局/</id>
    <published>2018-01-08T16:00:00.000Z</published>
    <updated>2018-02-08T07:22:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/meikidd/flex-layout" target="_blank" rel="external">原文链接</a> </p><a id="more"></a><h2 id="经典上-中-下布局"><a href="#经典上-中-下布局" class="headerlink" title="经典上-中-下布局"></a>经典上-中-下布局</h2><p>当页面内容高度小于可视区域高度时，footer 吸附在底部；当页面内容高度大于可视区域高度时，footer 被撑开排在 content 下方。<br><img src="https://p0.meituan.net/dpnewvc/096980425eb89f986991f866639fea4543883.png" width="800px" height="350px"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">article</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="在上-中-下布局的基础上，加了左侧定宽-sidebar"><a href="#在上-中-下布局的基础上，加了左侧定宽-sidebar" class="headerlink" title="在上-中-下布局的基础上，加了左侧定宽 sidebar"></a>在上-中-下布局的基础上，加了左侧定宽 sidebar</h2><p><img src="https://p1.meituan.net/dpnewvc/d1755ca8e911e19045f232bede34216946140.png" width="800px" height="350px"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span>ASIDE<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">flex-direction</span>: column;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.content</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: auto;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.content</span> <span class="selector-tag">article</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: auto;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.content</span> <span class="selector-tag">aside</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: none;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="左边是定宽-sidebar，右边是上-中-下布局。"><a href="#左边是定宽-sidebar，右边是上-中-下布局。" class="headerlink" title="左边是定宽 sidebar，右边是上-中-下布局。"></a>左边是定宽 sidebar，右边是上-中-下布局。</h2><p><img src="https://p0.meituan.net/dpnewvc/e04fc60927afab215d7d2d38570dbaa645908.png" width="800px" height="350px"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>ASIDE<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">aside</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: none;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.content</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: auto;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">flex-direction</span>: column;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.content</span> <span class="selector-tag">article</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: auto;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="还是上-中-下布局，区别是-header-固定在顶部，不会随着页面滚动。"><a href="#还是上-中-下布局，区别是-header-固定在顶部，不会随着页面滚动。" class="headerlink" title="还是上-中-下布局，区别是 header 固定在顶部，不会随着页面滚动。"></a>还是上-中-下布局，区别是 header 固定在顶部，不会随着页面滚动。</h2><p><img src="https://p0.meituan.net/dpnewvc/fa4df59463d759605a1cf0ebeb04927e40963.png" width="800px" height="350px"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">flex-direction</span>: column;</div><div class="line">    <span class="attribute">padding-top</span>: <span class="number">60px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">header</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</div><div class="line">    <span class="attribute">position</span>: fixed;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">article</span> &#123;</div><div class="line">    <span class="attribute">flex</span>: auto;</div><div class="line">    <span class="attribute">height</span>: <span class="number">1000px</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><h2 id="左侧-sidebar-固定在左侧且与视窗同高，当内容超出视窗高度时，在-sidebar-内部出现滚动条。左右两侧滚动条互相独立。"><a href="#左侧-sidebar-固定在左侧且与视窗同高，当内容超出视窗高度时，在-sidebar-内部出现滚动条。左右两侧滚动条互相独立。" class="headerlink" title="左侧 sidebar 固定在左侧且与视窗同高，当内容超出视窗高度时，在 sidebar 内部出现滚动条。左右两侧滚动条互相独立。"></a>左侧 sidebar 固定在左侧且与视窗同高，当内容超出视窗高度时，在 sidebar 内部出现滚动条。左右两侧滚动条互相独立。</h2><p><img src="https://p1.meituan.net/dpnewvc/c0bceb861d99c29b4eba816b755eabcc71777.png" width="800px" height="350px"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span></div><div class="line">    ASIDE</div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- many items --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>item<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>HEADER<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span>CONTENT<span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>FOOTER<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">aside</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: none;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">overflow-y</span>: auto;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.content</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: auto;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">overflow-y</span>: auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.content</span> <span class="selector-tag">article</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/meikidd/flex-layout&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="http://our-orginization.github.io/categories/Node/"/>
    
    
      <category term="css" scheme="http://our-orginization.github.io/tags/css/"/>
    
      <category term="flex" scheme="http://our-orginization.github.io/tags/flex/"/>
    
      <category term="布局" scheme="http://our-orginization.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="Layout" scheme="http://our-orginization.github.io/tags/Layout/"/>
    
  </entry>
  
  <entry>
    <title>移动端页面开发手记（一）</title>
    <link href="http://our-orginization.github.io/2017/12/25/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E6%89%8B%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://our-orginization.github.io/2017/12/25/移动端页面开发手记（一）/</id>
    <published>2017-12-24T16:00:00.000Z</published>
    <updated>2018-02-08T07:22:39.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="A-pixel-is-not-a-pixel-is-not-a-pixel"><a href="#A-pixel-is-not-a-pixel-is-not-a-pixel" class="headerlink" title="A pixel is not a pixel is not a pixel."></a>A pixel is not a pixel is not a pixel.</h6><a id="more"></a><h3 id="一-像素"><a href="#一-像素" class="headerlink" title="一.像素"></a>一.像素</h3><p>像素是web页面布局的基础，那么到底什么才是一个像素呢？在PC开发时，我对像素的理解就是简单的1个px。</p><p>那么看看百度百科的解释：<br>像素是指由图像的小方格即所谓的像素(pixel)组成的，这些小方块都有一个明确的位置和被分配的色彩数值，而这些一小方格的颜色和位置就决定该图像所呈现出来的样子。可以将像素视为整个图像中不可分割的单位或者是元素，不可分割的意思是它不能够再切割成更小单位抑或是元素，它是以一个单一颜色的小格存在。每一个点阵图像包含了一定量的像素，这些像素决定图像在屏幕上所呈现的大小。</p><p>实际上，在Web开发领域，像素有以下两层含义：</p><ul><li>设备像素：设备屏幕的物理像素，对于任何设备来讲物理像素的数量是固定的。<h6 id="比如iPhone-5的分辨率640-x-1136px。。"><a href="#比如iPhone-5的分辨率640-x-1136px。。" class="headerlink" title="比如iPhone 5的分辨率640 x 1136px。。"></a>比如iPhone 5的分辨率640 x 1136px。。</h6></li><li>CSS像素：这是一个抽象的像素概念，它是Web编程的概念，指的是CSS样式代码中使用的逻辑像素。<h6 id="在CSS规范中，长度单位可以分为两类，绝对-absolute-单位以及相对-relative-单位。px是一个相对单位，相对的是设备像素-device-pixel-。"><a href="#在CSS规范中，长度单位可以分为两类，绝对-absolute-单位以及相对-relative-单位。px是一个相对单位，相对的是设备像素-device-pixel-。" class="headerlink" title="在CSS规范中，长度单位可以分为两类，绝对(absolute)单位以及相对(relative)单位。px是一个相对单位，相对的是设备像素(device pixel)。"></a>在CSS规范中，长度单位可以分为两类，绝对(absolute)单位以及相对(relative)单位。px是一个相对单位，相对的是设备像素(device pixel)。</h6></li></ul><p>如下图，是在缩放比例为1，即scale = 1的情况下，设备像素和CSS像素示意图:</p><p><img src="https://p0.meituan.net/dpnewvc/5feca8ed6f794dbadd5e43e6a2f95c586414.jpg" alt="image"></p><p>那么再深入的考虑这样一个问题，当我给一个元素设置了 width: 200px;这条样式的时候，到底发生了什么事情？</p><p>可能有人会说：“废话！元素的宽度是200px呗。”对，并没有什么问题，但是这个200px指的是什么呢？因为我们知道，对于web前端来讲像素有两层含义，那么到底是设备像素还是CSS像素？实际上我们控制的是CSS像素，因为前面提到了，CSS像素是给我们web前端开发者创造的抽象概念。所以你要记住：当你给元素设置了 width: 200px 时，这个元素的宽度跨越了200个CSS像素。但是它并不一定跨越200个设备像素，至于会跨越多少个设备像素，就取决于手机屏幕的特性和用户的缩放了,举个栗子：</p><p>苹果手机的Retina视网膜屏幕，是一个高密度屏幕，它的像素密度是普通屏幕的2倍，所以当我们设置 width: 2px; 时，2个CSS像素跨越了4个设备像素如图：</p><p><img src="https://p0.meituan.net/dpnewvc/3ddae5377226f4e0682519c3a3333c334368.png" alt="image"></p><p>CSS像素的大小是可变的，比如用后缩放页面的时候，实际上就是在缩小或放大CSS像素，而设备像素无论大小还是数量都是不变的。</p><h3 id="二-移动端的三个视图"><a href="#二-移动端的三个视图" class="headerlink" title="二.移动端的三个视图"></a>二.移动端的三个视图</h3><p>你一定写过这样一条样式： width:25%; 但是你有想过给一个元素加上这样一条样式之后发生了什么吗？25%是基于谁的25%？明白的同学可能知道了：一个块元素默认的宽度是其父元素的100%，是基于起父元素的，所以25%指的是父元素宽度的25%，所以，body元素的默认宽度是html元素宽度的100%，那么你有没有想过html元素的宽度是基于谁的呢？这个时候，就要引出一个概念：<strong>初始包含块</strong>和<strong>视口</strong>。</p><p>记住一句话：视口是html的父元素，所以我们称视口为<strong>初始包含块</strong>。 这样你就明白了，<strong>html元素的百分比是基于视口的</strong>。</p><h4 id="视图一：-布局视口"><a href="#视图一：-布局视口" class="headerlink" title="视图一： 布局视口"></a>视图一： 布局视口</h4><h6 id="布局视口：移动端CSS布局的依据视口，即CSS布局会根据布局视口来计算。"><a href="#布局视口：移动端CSS布局的依据视口，即CSS布局会根据布局视口来计算。" class="headerlink" title="布局视口：移动端CSS布局的依据视口，即CSS布局会根据布局视口来计算。"></a>布局视口：移动端CSS布局的依据视口，即CSS布局会根据布局视口来计算。</h6><p>写过css的小伙伴应该知道，我们在 html、 body设置 width:100%;height:100%;的时候，它并不是无效的。我们都知道 100%这种百分数应该是继承父元素而来的。那在这里是继承哪里的呢？<br>在PC浏览器中，有一个用来约束CSS布局视口的东西，又叫做初始包含块。这也就是所有宽高继承的由来。除去 margin、 padding，布局视口和浏览器可视窗口宽度是一致的，同时也和浏览器本身的宽度一致。<br>在PC浏览器中，视口只有一个，并且 视口的宽度 = 浏览器窗口的宽度，但是在移动端也要根据这个来设计的话，那么PC端设计的网站在移动端看起来会很丑，因为PC端的网页宽度在800 ~ 1024个CSS像素，而手机屏幕要窄的多，这个时候再PC端25%的宽度在移动端看起来会很窄。所以，布局视口的概念产生了。</p><p>也就是说，在移动端，视口和浏览器窗口将不在关联，实际上，布局视口要比浏览器窗口大的多(在手机和平板中浏览器布局视口的宽度在768~1024像素之间)，如下图（布局视口和窗口的关系）：</p><p><img src="https://p1.meituan.net/dpnewvc/eb60ec0ff69b0edb5644446a2d21f61d9333.jpg" alt="image"></p><p>可以通过以下JavaScript代码获取布局视口的宽度和高度：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.documentElement.clientWidth</div><div class="line"><span class="built_in">document</span>.documentElement.clientHeight</div></pre></td></tr></table></figure></p><h4 id="视图二：-视觉视图"><a href="#视图二：-视觉视图" class="headerlink" title="视图二： 视觉视图"></a>视图二： 视觉视图</h4><p><img src="https://p0.meituan.net/dpnewvc/e5aeb136d24d570d8a0fe38310b554f131989.png" alt="image"><br>对于视觉视口来说，这个东西是呈现给用户的，它是用户看到网页区域内CSS像素的数量。由于用户可以自行进行缩放控制，所以这个视口并不是开发者需要重点关注的。<br>值得注意的是，在移动端缩放不会改变布局视口的宽度，当缩小的时候，屏幕覆盖的css像素变多，视觉视口变大，反之亦然。<br>而在PC端，缩放对应布局宽度和视觉窗口宽度都是联动的。而浏览器宽度本身是固定的，无论怎么缩放都不受影响。<br>如果对上面的宽度还是很乱，那么这里有一个表格可以帮助你理清思路。<br>以下表格横向都以浏览器窗口的宽度作为基准：</p><ul><li>PC端<br>状态 | 布局视口 | 视觉视口 | 浏览器窗口（基准）<br>—–|—–|—–|—–<br>默认 | 相等 | 相等 | -<br>放大 | 变小 | 变小 | -<br>缩小 | 变大 | 变大 | -</li><li>移动端<br>状态 | 布局视口 | 视觉视口 | 浏览器窗口（基准）<br>—–|—–|—–|—–<br>默认 | 偏大 | 相等 | -<br>放大 | 不变 | 变小 | -<br>缩小 | 不变 | 变大 | -</li></ul><h4 id="视图三：-理想视图"><a href="#视图三：-理想视图" class="headerlink" title="视图三： 理想视图"></a>视图三： 理想视图</h4><p>我们前面提到过，布局视口的宽度一般在 680~1024像素之间，这样可以使得PC网站在手机中不被压扁，但是这并不理想，因为手机更适合窄的网站，换句话说，布局视口并不是最理想的宽度，所以，就引入了理想视口。</p><p>理想视口，定义了理想视口的宽度，比如对于iphone5来讲，理想视口是320*568。但是最终作用的还是布局视口，因为我们的css是依据布局视口计算的，所以你可以这样理解理想视口：理想的布局视口。下面这段代码可以告诉手机浏览器要把布局视口设为理想视口：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></div></pre></td></tr></table></figure></p><p>然而，这段代码其实也并不完美，在IE浏览器中，由于横屏竖屏的切换会对其造成影响，为了解决这个兼容性的问题，最后再加上一句，就有了现在的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> <span class="attr">initial-scale</span>=<span class="string">1.0/</span>&gt;</span></div></pre></td></tr></table></figure></p><p>initial-scale=1 的意思是初始缩放的比例是1，使用它的时候，同时也会将布局视口的尺寸设置为缩放后的尺寸。而缩放的尺寸就是基于屏幕的宽度来的，也就起到了和width=device-width<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">总结一下：</div><div class="line">- 在PC端，布局视口就是浏览器窗口</div><div class="line">- 在移动端，视口被分为两个：布局视口、视觉视口。</div><div class="line">- 移动端还有一个理想视口，它是布局视口的理想尺寸，即理想的布局视口。</div><div class="line">- 可以将布局视口的宽度设为理想视口</div><div class="line"></div><div class="line">### 三、设备像素比(Device Pixel Ratio 简称：DPR)</div><div class="line">有时候我们会发现，当我们在适某一机型的时候，显示上没什么问题。但是一旦我换到另外一部手机，发现出现了模糊的情况，尤其以图片更为显著。</div><div class="line">其实这个问题，就是涉及到了上面讲到的一个属性：设备像素比，即我们经常说的dpr。下面先来看dpr的表现：</div><div class="line">假设现在有一台iphone6，那么它的设备独立像素是375x667，dpr为2，尺寸是4.7in，那么物理像素就是750x1334。</div><div class="line">同样的我们也有一台不知名的设备，它的设备独立像素刚好也是375x667，尺寸也是4.7in，但是dpr为1，此时的物理像素就是375x667。</div><div class="line"></div><div class="line">下面是设备像素比的计算公式（公式成立的大前提：缩放比例为1）：</div><div class="line">###### 设备像素比(DPR) = 设备像素个数 / 理想视口CSS像素个数(device-width)</div><div class="line">与理想视口一样，设备像素比对于不同的设备是不同的，但是他们都是合理的，比如早起iphone的设备像素是320px，理想视口也是320px，所以早起iphone的DPR=1，而后来iphone的设备像素为640px，理想视口还是320px，所以后来iphone的DPR=2。</div><div class="line">而对于缩放来说，**缩小放大的是 CSS像素**。</div><div class="line"></div><div class="line">#### 模糊的产生</div><div class="line">知道了1个css像素覆盖的物理像素可能不同，就好理解为什么会出现模糊的情况了。</div><div class="line">这里又讲到一个名词：**位图像素**。</div><div class="line">位图像素是栅格图像（如：png,jpg,gif等）最小的数据单元。每一个位图像素都包含着一些自身的显示信息。（如：显示位置，颜色值，透明度等）</div><div class="line">理论上来说，**1个位图像素对应1个物理像素，图片才能等到完美清晰的展示**。</div><div class="line">但是上面说过，在retina屏幕上，会出现1个位图像素对应多个物理像素。</div><div class="line">还是以iphone6为例，1个位图像素对应4个物理像素。由于单个位图像素已经是最小的数据单位了，它不能再被进行切割。于是为了能够显示出来，就只能就近取色，从而导致所谓的图片模糊问题。</div><div class="line"></div><div class="line">#### 如何解决</div><div class="line">很明显，由于位图像素不够分而产生模糊的情况，解决的办法十分简单，就是使用跟dpr同个倍数大小的图片。比如iphone6，一个200x300的 img标签，原图就要提供400x600的大小。</div><div class="line">那么当加载到 img标签中，浏览器会自动对每1px的css像素减半，可以理解为此时还是维持着1:1的css像素:物理像素，不产生模糊。</div><div class="line">这个做法其实就是手淘团队在做retina适配的一个重要的原理之一，后面会讲到，这里先放着不说。</div><div class="line"></div><div class="line">### 四.meta标签</div><div class="line">meta视口标签存在的主要目的是为了让布局视口和理想视口的宽度匹配，meta视口标签应该放在HTML文档的head标签内，语法如下：</div><div class="line">```html  </div><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</div></pre></td></tr></table></figure></p><p>其中 content 属性是一个字符串值，字符串是由逗号“，”分隔的 名/值 对组成，共有5个：</p><ul><li>width：设置布局视口的宽</li><li>init-scale：设置页面的初始缩放程度</li><li>minimum-scale：设置了页面最小缩放程度</li><li>maximum-scale：设置了页面最大缩放程度</li><li>user-scalable：是否允许用户对页面进行缩放操作</li></ul><p>上面代码的意思是，让布局视口的宽度等于理想视口的宽度，页面的初始缩放比例以及最大缩放比例都为1，且不允许用户对页面进行缩放操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;A-pixel-is-not-a-pixel-is-not-a-pixel&quot;&gt;&lt;a href=&quot;#A-pixel-is-not-a-pixel-is-not-a-pixel&quot; class=&quot;headerlink&quot; title=&quot;A pixel is not a pixel is not a pixel.&quot;&gt;&lt;/a&gt;A pixel is not a pixel is not a pixel.&lt;/h6&gt;
    
    </summary>
    
      <category term="web mobile" scheme="http://our-orginization.github.io/categories/web-mobile/"/>
    
    
      <category term="mobile" scheme="http://our-orginization.github.io/tags/mobile/"/>
    
      <category term="web" scheme="http://our-orginization.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Angular4</title>
    <link href="http://our-orginization.github.io/2017/11/02/Angular4/"/>
    <id>http://our-orginization.github.io/2017/11/02/Angular4/</id>
    <published>2017-11-01T16:00:00.000Z</published>
    <updated>2018-02-08T07:20:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了angular4的用法和新特性。</p><a id="more"></a><h1 id="Angular-与-AngularJS-有什么区别"><a href="#Angular-与-AngularJS-有什么区别" class="headerlink" title="Angular 与 AngularJS 有什么区别"></a>Angular 与 AngularJS 有什么区别</h1><ul><li>不再有Controller和 Scope</li><li>更好的组件化及代码npm复用</li><li>更好的移动端支持</li><li>引入了 RxJS 与 Observable</li><li>引入了 Zone.js，提供更加智能的变化检测</li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>跨平台</li><li>高性能</li><li>多种IDE支持</li></ul><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="基础要求"><a href="#基础要求" class="headerlink" title="基础要求"></a>基础要求</h2><ul><li>Node.js</li><li>Git</li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li><p>安装 Angular CLI</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g @angular/cli</div></pre></td></tr></table></figure></li><li><p>检测 Angular CLI 是否安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng --version</div></pre></td></tr></table></figure></li><li><p>创建新的项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ng new PROJECT-NAME</div></pre></td></tr></table></figure></li></ul><p>这个CLI为我们创建了第一个Angular组件。 它就是名叫<code>app-root</code>的根组件。 你可以在<code>./src/app/app.component.ts</code>目录下找到它。</p><ul><li>启动本地服务器<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd PROJECT-NAME</div><div class="line">ng serve</div></pre></td></tr></table></figure></li></ul><p>使用–open（或-o）参数可以自动打开浏览器并访问<a href="http://localhost:4200/。" target="_blank" rel="external">http://localhost:4200/。</a></p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h2><p><strong>插值表达式</strong><br>在 Angular 中，我们可以使用插值语法实现数据绑定。Angular 自动从组件中提取属性的值，并且把这些值插入浏览器中。当这些属性发生变化时，Angular 就会自动刷新显示。Angular 先对它求值，再把它转换成字符串。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'app-root'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line"><span class="string">    &lt;h2&gt;大家好，我是&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></div><div class="line"><span class="string">    &lt;p&gt;我来自&lt;strong&gt;&#123;&#123;address.province&#125;&#125;&lt;/strong&gt;省,</span></div><div class="line"><span class="string">      &lt;strong&gt;&#123;&#123;address.city&#125;&#125;&lt;/strong&gt;市</span></div><div class="line"><span class="string">    &lt;/p&gt;</span></div><div class="line"><span class="string">    &lt;p&gt;&#123;&#123;address|json&#125;&#125;&lt;/p&gt;</span></div><div class="line"><span class="string">  `</span>,</div><div class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</div><div class="line">  name = <span class="string">'Semlinker'</span>;</div><div class="line">  address = &#123;</div><div class="line">    province: <span class="string">'福建'</span>,</div><div class="line">    city: <span class="string">'厦门'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>值得一提的是，这里使用了 Angular 内置的 json 管道。<br><code>@Component</code>装饰器中指定的 CSS 选择器<code>selector</code>，它指定了一个叫<code>app-root</code>的元素。 该元素是<code>index.html</code>的<code>body</code>里的占位符。当通过<code>main.ts</code>中的<code>AppComponent</code>类启动时，Angular 在<code>index.html</code>中查找一个<code>my-app</code>元素， 然后实例化一个<code>AppComponent</code>，并将其渲染到<code>my-app</code>标签中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">app-root</span>&gt;</span><span class="tag">&lt;/<span class="name">app-root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><p>插值表达式可以把计算后的字符串插入到 HTML 元素标签内的文本或对标签的属性进行赋值。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></div><div class="line">  &#123;&#123;title&#125;&#125;</div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;heroImageUrl&#125;&#125;"</span> <span class="attr">style</span>=<span class="string">"height:30px"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div></pre></td></tr></table></figure></p><p>根据json管道补充一下管道操作符（|）：<br>在绑定之前，表达式的结果可能需要一些转换。例如，可能希望把数字显示成金额、强制文本变成大写，或者过滤列表以及进行排序。</p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p><strong>模板表达式</strong><br>模板表达式产生一个值。 Angular 执行这个表达式，并把它赋值给绑定目标的属性，这个绑定目标可能是 HTML 元素、组件或指令。<br>JavaScript 中那些具有或可能引发副作用的表达式是被禁止的，包括：</p><ul><li>赋值 (=, +=, -=, …)</li><li>new运算符</li><li>使用;或,的链式表达式</li><li>自增或自减操作符 (++和–)</li></ul><p>表达式中的上下文变量是由模板变量、指令的上下文变量（如果有）和组件的成员叠加而成的。 如果我们要引用的变量名存在于一个以上的命名空间中，那么，<strong>模板变量是最优先的，其次是指令的上下文变量，最后是组件的成员</strong>。</p><p><strong>模板语句</strong><br>模板语句用来响应由绑定目标（如 HTML 元素、组件或指令）触发的事件。它出现在=号右侧的引号中，就像这样：<code>(event)=”statement”</code>。<br>某些 JavaScript 语法是不允许的：</p><ul><li>new运算符</li><li>自增和自减运算符：++和–</li><li>操作并赋值，例如+=和-=</li><li>位操作符|和&amp;</li><li>模板表达式运算符</li></ul><p>语句上下文可以引用模板自身上下文中的属性。 在下面的例子中，就把模板的<code>$event</code>对象、模板输入变量 <code>(let hero)</code>和模板引用变量 <code>(#heroForm)</code>传给了组件中的一个事件处理器方法。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"onSave($event)"</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span> (<span class="attr">click</span>)=<span class="string">"deleteHero(hero)"</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">heroForm</span> (<span class="attr">ngSubmit</span>)=<span class="string">"onSubmit(heroForm)"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>数据绑定和数据方向</strong></p><ul><li>1.单向（数据源-&gt;视图）： 插值表达式 Property Attribute 类 样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;expression&#125;&#125;</div><div class="line">[target]=&quot;expression&quot;</div><div class="line">bind-target=&quot;expression&quot;</div></pre></td></tr></table></figure></li></ul><p>注1.方括号表示要计算的模板表达式，不加方括号，Angular会将表达式视为字符串，而不会计算这个字符串。<br>注2.当要渲染的数据类型是字符串时，倾向于使用插值表达式，否则必须使用属性绑定。<br>注3.当元素没有属性可绑的时候，就必须使用 attribute 绑定。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">1</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--  expression calculates colspan=2 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> [<span class="attr">attr.colspan</span>]=<span class="string">"1 + 1"</span>&gt;</span>One-Two<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- ERROR: There is no `colspan` property to set!</span></div><div class="line"><span class="comment">    &lt;tr&gt;&lt;td colspan="&#123;&#123;1 + 1&#125;&#125;"&gt;Three-Four&lt;/td&gt;&lt;/tr&gt;</span></div><div class="line"><span class="comment">  --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>Six<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p><p>注4.css类绑定<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 当badCurly有值的时候，整个class设置的内容全部被覆盖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bad curly special"</span></span></div><div class="line"><span class="tag">     [<span class="attr">class</span>]=<span class="string">"badCurly"</span>&gt;</span>Bad curly<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 模板表达式的值为真时，添加这个类，否则移除 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">class.special</span>]=<span class="string">"isSpecial"</span>&gt;</span>The class binding is special<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"special"</span></span></div><div class="line"><span class="tag">     [<span class="attr">class.special</span>]=<span class="string">"!isSpecial"</span>&gt;</span>This one is not so special<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>注5.style样式绑定<br>样式绑定的语法与属性绑定类似。 但方括号中的部分不是元素的属性名，而由style前缀，一个点和 CSS 样式的属性名组成。 形如：<code>[style.style-property]</code>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> [<span class="attr">style.font-size.em</span>]=<span class="string">"isSpecial ? 3 : 1"</span> &gt;</span>Big<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> [<span class="attr">style.font-size.</span>%]=<span class="string">"!isSpecial ? 150 : 50"</span> &gt;</span>Small<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p><ul><li>2.单向（视图-&gt;数据源）： 事件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(targrt)=&quot;statement&quot;</div><div class="line">on-target=&quot;statement&quot;</div></pre></td></tr></table></figure></li></ul><p>事件对象的形态取决于目标事件。如果目标事件是原生 DOM 元素事件， $event就是 DOM事件对象，它有像target和target.value这样的属性。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> [<span class="attr">value</span>]=<span class="string">"currentHero.name"</span></span></div><div class="line"><span class="tag">       (<span class="attr">input</span>)=<span class="string">"currentHero.name=$event.target.value"</span> &gt;</span></div></pre></td></tr></table></figure></p><ul><li>3.双向<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[(target)]=&quot;expression&quot;</div><div class="line">bindon-target=&quot;expression&quot;</div></pre></td></tr></table></figure></li></ul><p><strong>在 Angular 的世界中，attribute 唯一的作用是用来初始化元素和指令的状态。 当进行数据绑定时，只是在与元素和指令的 property 和事件打交道，而 attribute 就完全靠边站了。</strong><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component, EventEmitter, Input, Output &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"> </div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'app-sizer'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line"><span class="string">  &lt;div&gt;</span></div><div class="line"><span class="string">    &lt;button (click)="dec()" title="smaller"&gt;-&lt;/button&gt;</span></div><div class="line"><span class="string">    &lt;button (click)="inc()" title="bigger"&gt;+&lt;/button&gt;</span></div><div class="line"><span class="string">    &lt;label [style.font-size.px]="size"&gt;FontSize: &#123;&#123;size&#125;&#125;px&lt;/label&gt;</span></div><div class="line"><span class="string">  &lt;/div&gt;`</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SizerComponent &#123;</div><div class="line">  <span class="meta">@Input</span>()  size: <span class="built_in">number</span> | <span class="built_in">string</span>;</div><div class="line">  <span class="meta">@Output</span>() sizeChange = <span class="keyword">new</span> EventEmitter&lt;<span class="built_in">number</span>&gt;();</div><div class="line"> </div><div class="line">  dec() &#123; <span class="keyword">this</span>.resize(<span class="number">-1</span>); &#125;</div><div class="line">  inc() &#123; <span class="keyword">this</span>.resize(+<span class="number">1</span>); &#125;</div><div class="line"> </div><div class="line">  resize(delta: <span class="built_in">number</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.size = <span class="built_in">Math</span>.min(<span class="number">40</span>, <span class="built_in">Math</span>.max(<span class="number">8</span>, +<span class="keyword">this</span>.size + delta));</div><div class="line">    <span class="keyword">this</span>.sizeChange.emit(<span class="keyword">this</span>.size);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">app-sizer</span> [(<span class="attr">size</span>)]=<span class="string">"fontSizePx"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-sizer</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">style.font-size.px</span>]=<span class="string">"fontSizePx"</span>&gt;</span>Resizable Text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>内置指令</strong></p><ol><li>内置属性型指令</li></ol><ul><li>NgClass - 添加或移除一组CSS类<br>可以把ngClass绑定到一个<code> key:value</code> 形式的控制对象。这个对象中的每个 key 都是一个 CSS 类名，如果它的 value 是true，这个类就会被加上，否则就会被移除。<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">currentClasses: &#123;&#125;;</div><div class="line">setCurrentClasses() &#123;</div><div class="line">  <span class="comment">// CSS classes: added/removed per current state of component properties</span></div><div class="line">  <span class="keyword">this</span>.currentClasses =  &#123;</div><div class="line">    <span class="string">'saveable'</span>: <span class="keyword">this</span>.canSave,</div><div class="line">    <span class="string">'modified'</span>: !<span class="keyword">this</span>.isUnchanged,</div><div class="line">    <span class="string">'special'</span>:  <span class="keyword">this</span>.isSpecial</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngClass</span>]=<span class="string">"currentClasses"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>NgStyle - 添加或移除一组CSS样式<br>NgStyle需要绑定到一个<code> key:value</code>控制对象。 对象的每个 key 是样式名，它的 value 是能用于这个样式的任何值。<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">currentStyles: &#123;&#125;;</div><div class="line">setCurrentStyles() &#123;</div><div class="line">  <span class="comment">// CSS styles: set per current state of component properties</span></div><div class="line">  <span class="keyword">this</span>.currentStyles = &#123;</div><div class="line">    <span class="string">'font-style'</span>:  <span class="keyword">this</span>.canSave      ? <span class="string">'italic'</span> : <span class="string">'normal'</span>,</div><div class="line">    <span class="string">'font-weight'</span>: !<span class="keyword">this</span>.isUnchanged ? <span class="string">'bold'</span>   : <span class="string">'normal'</span>,</div><div class="line">    <span class="string">'font-size'</span>:   <span class="keyword">this</span>.isSpecial    ? <span class="string">'24px'</span>   : <span class="string">'12px'</span></div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngStyle</span>]=<span class="string">"currentStyles"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><ul><li>NgModel - 双向绑定到HTML表单元素<br><strong>在使用ngModel指令进行双向数据绑定之前，我们必须导入FormsModule并把它添加到Angular模块的imports列表中。</strong></li></ul><p>2.内置结构型指令</p><ul><li><p>NgIf - 根据条件把一个元素添加到DOM中或从DOM移除</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">app-hero-detail</span> *<span class="attr">ngIf</span>=<span class="string">"isActive"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-hero-detail</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>NgSwitch - 一组指令，用于切换一组视图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">ngSwitch</span>]=<span class="string">"currentHero.emotion"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">app-happy-hero</span>    *<span class="attr">ngSwitchCase</span>=<span class="string">"'happy'"</span>    [<span class="attr">hero</span>]=<span class="string">"currentHero"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-happy-hero</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">app-sad-hero</span>      *<span class="attr">ngSwitchCase</span>=<span class="string">"'sad'"</span>      [<span class="attr">hero</span>]=<span class="string">"currentHero"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-sad-hero</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">app-confused-hero</span> *<span class="attr">ngSwitchCase</span>=<span class="string">"'confused'"</span> [<span class="attr">hero</span>]=<span class="string">"currentHero"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-confused-hero</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">app-unknown-hero</span>  *<span class="attr">ngSwitchDefault</span>           [<span class="attr">hero</span>]=<span class="string">"currentHero"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-unknown-hero</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>NgForOf - 对列表中的每个条目重复套用同一个模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span>&gt;</span>&#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes; let i=index"</span>&gt;</span>&#123;&#123;i + 1&#125;&#125; - &#123;&#123;hero.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p><strong>模板引用变量（#）</strong><br>模板引用变量通常用来引用模板中的某个DOM元素。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">phone</span> <span class="attr">placeholder</span>=<span class="string">"phone number"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"callPhone(phone.value)"</span>&gt;</span>Call<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>输入输出属性</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">app-hero-detail</span> [<span class="attr">hero</span>]=<span class="string">"currentHero"</span> (<span class="attr">deleteRequest</span>)=<span class="string">"deleteHero($event)"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">app-hero-detail</span>&gt;</span></div></pre></td></tr></table></figure></p><p>在HeroDetailComponent内部，这些属性被装饰器标记成了输入和输出属性。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Input</span>()  hero: Hero;</div><div class="line"><span class="meta">@Output</span>() deleteRequest = <span class="keyword">new</span> EventEmitter&lt;Hero&gt;();</div></pre></td></tr></table></figure></p><p>从HeroDetailComponent角度来看，HeroDetailComponent.hero是个输入属性， 因为数据流从模板绑定表达式流入那个属性。<br>从HeroDetailComponent角度来看，HeroDetailComponent.deleteRequest是个输出属性， 因为事件从那个属性流出，流向模板绑定语句中的处理器。</p><p>为输出属性起别名：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Output</span>(<span class="string">'myClick'</span>) clicks = <span class="keyword">new</span> EventEmitter&lt;<span class="built_in">string</span>&gt;();</div></pre></td></tr></table></figure></p><p><strong>模板表达式操作符</strong></p><ul><li>管道操作符（|）</li><li><p>安全导航操作符 ( ?. ) 和空属性路径<br>Angular 安全导航操作符 (?.) 是在属性路径中保护空值的更加流畅、便利的方式。 表达式会在它遇到第一个空值的时候跳出。 显示是空的，但应用正常工作，而没有发生错误。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- No hero, no problem! --&gt;</span></div><div class="line">The null hero's name is &#123;&#123;nullHero?.name&#125;&#125;</div></pre></td></tr></table></figure></li><li><p>非空断言操作符（!）<br>在 Angular 编译器把你的模板转换成 TypeScript 代码时，这个操作符会防止 TypeScript 报告 “hero.name可能为null或undefined”的错误。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngIf</span>=<span class="string">"hero"</span>&gt;</span></div><div class="line">  The hero's name is &#123;&#123;hero!.name&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p><strong>内联 (inline)模板和模板文件</strong><br>可以使用<code>template</code>属性把它定义为内联的，或者把模板定义在一个独立的 HTML 文件中， 再通过<code>@Component</code>装饰器中的<code>templateUrl</code>属性， 在组件元数据中把它链接到组件。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'app-home'</span>,</div><div class="line">  templateUrl: <span class="string">'./home.component.html'</span>,</div><div class="line">  styleUrls: [<span class="string">'./home.component.css'</span>]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'app-root'</span>,</div><div class="line">  template: <span class="string">`</span></div><div class="line"><span class="string">    &lt;h2&gt;大家好，我是&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></div><div class="line"><span class="string">    &lt;p&gt;我来自&lt;strong&gt;&#123;&#123;address.province&#125;&#125;&lt;/strong&gt;省,</span></div><div class="line"><span class="string">      &lt;strong&gt;&#123;&#123;address.city&#125;&#125;&lt;/strong&gt;市</span></div><div class="line"><span class="string">    &lt;/p&gt;</span></div><div class="line"><span class="string">    &lt;p&gt;&#123;&#123;address|json&#125;&#125;&lt;/p&gt;</span></div><div class="line"><span class="string">  `</span>,</div><div class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h1 id="组件交互"><a href="#组件交互" class="headerlink" title="组件交互"></a>组件交互</h1><p><strong>1.通过输入型绑定把数据从父组件传到子组件 @Input()，需要import入core中的Input类</strong><br><strong>2.通过setter截听输入属性值的变化</strong><br><figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"> </div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'app-name-child'</span>,</div><div class="line">  template: <span class="string">'&lt;h3&gt;"&#123;&#123;name&#125;&#125;"&lt;/h3&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> NameChildComponent &#123;</div><div class="line">  <span class="keyword">private</span> _name = <span class="string">''</span>;</div><div class="line"> </div><div class="line">  <span class="meta">@Input</span>()</div><div class="line">  <span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</div><div class="line">    <span class="keyword">this</span>._name = (name &amp;&amp; name.trim()) || <span class="string">'&lt;no name set&gt;'</span>;</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  <span class="keyword">get</span> name(): <span class="built_in">string</span> &#123; <span class="keyword">return</span> <span class="keyword">this</span>._name; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>3.通过ngOnChanges()来截听输入属性值的变化</strong><br>使用OnChanges生命周期钩子接口的ngOnChanges()方法来监测输入属性值的变化并做出回应。</p><p><strong>未完待续</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了angular4的用法和新特性。&lt;/p&gt;
    
    </summary>
    
      <category term="angular" scheme="http://our-orginization.github.io/categories/angular/"/>
    
    
      <category term="javascript" scheme="http://our-orginization.github.io/tags/javascript/"/>
    
      <category term="angular" scheme="http://our-orginization.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs</title>
    <link href="http://our-orginization.github.io/2017/09/25/nodejs/"/>
    <id>http://our-orginization.github.io/2017/09/25/nodejs/</id>
    <published>2017-09-24T16:00:00.000Z</published>
    <updated>2018-01-04T03:21:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是一个nodejs的学习笔记。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>NodeJs 可以解析Js代码（没有浏览器安全级别的限制）<br>提供系统级别的API：</p><ul><li>文件的读写</li><li>进程管理</li><li>网络通信</li></ul><p>Node.js的版本：</p><ul><li>偶数位为稳定版本（0.6.x 0.8.x)</li><li>奇数为非稳定版本 (0.5.x 0.7.x)</li></ul><h1 id="在Mac环境下搭建一个简单的web服务器"><a href="#在Mac环境下搭建一个简单的web服务器" class="headerlink" title="在Mac环境下搭建一个简单的web服务器"></a>在Mac环境下搭建一个简单的web服务器</h1><p>前提：</p><ul><li>安装xcode <code>xcode-select –install</code></li><li>检查是否已经安装 Python</li><li>安装 Homebrew</li><li>安装 Node</li><li>创建 Demo 目录</li></ul><p>在以上步骤都准备好后，可以开始搭建我们最简单的Web服务器了，新建文件server.js，粘贴下面代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;);</div><div class="line">    res.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;).listen(<span class="number">1337</span>,<span class="string">'127.0.0.1'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:1337/'</span>);</div></pre></td></tr></table></figure></p><p>然后，在server.js目录下运行命令，即可启动Web服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node serve.js</div></pre></td></tr></table></figure></p><p>这样，就可以通过访问127.0.0.1:1337访问到我们的Hello World页面了。</p><h1 id="模块与包管理工具"><a href="#模块与包管理工具" class="headerlink" title="模块与包管理工具"></a>模块与包管理工具</h1><p><strong>js的天生缺陷——缺少模块化管理机制</strong><br>·表现</p><blockquote><p>JS中容易出现变量被覆盖，方法被替代的情况（既被污染）。特别是存在依赖关系时，容易出现错误。这是因为JS缺少模块管理机制，来隔离实现各种不同功能的JS判断，避免它们相互污染。</p></blockquote><p>·解决</p><blockquote><p>经常采用命名空间的方式，把变量和函数限制在某个特定的作用域内，人肉约定一套命名规范来限制代码，保证代码安全运行。jQuery中有许多变量和方法，但是无法直接访问，必须通过jQuery，$调用各个方法。</p></blockquote><p><strong>Commonjs规范</strong><br>不同于jQuery，Commonjs是一套规范，约定了js如何组织，如何编写，包括包，二进制，套接字，单元测试等等。大部分标准在拟定和讨论之中，首先把执行不同任务的代码块和代码文件看为独立的模块，每一个模块都是一个单独的作用域，但不是孤立的，可能存在依赖关系。每个模块分为三个部分，定义、标识和引用。这套规范与现实产品如node.js相互影响，良性循环。</p><p><strong>NodeJs的模块管理机制</strong><br>基于commonjs实现了模块管理系统。node中每一个js文件都是一个独立的模块，在其内部不需要有命名空间，不需要担心变量的污染和方法定义时的隔离。同时模块之间可以组合形成更强大的模块或功能包。npm即是用来管理各种功能包的。</p><p><strong>模块的分类</strong></p><ul><li>模块的分类: 核心模块、文件模块、第三方模块；</li><li>模块的引用：可以通过路径和模块名。模块名引用最终也会被映射为路径。包含了核心函数的核心模块会在node启动时被预先加载。</li><li>文件模块、第三方模块 都是非核心模块，文件模块就是本地模块。</li></ul><p><strong>创建一个最简单的nodejs模块</strong><br>1.创建student.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">student</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Add student:"</span> + student);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.add = add;</div></pre></td></tr></table></figure></p><p>2.创建tescher.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">teacher</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Add teache:"</span> + teacher);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.add = add;</div></pre></td></tr></table></figure></p><p>3.创建klass.js，引入上面两个模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> student = <span class="built_in">require</span>(<span class="string">'./student'</span>);</div><div class="line"><span class="keyword">var</span> teacher= <span class="built_in">require</span>(<span class="string">'./teacher'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">teacherName, students</span>) </span>&#123;</div><div class="line">    teacher.add(teacherName);</div><div class="line">    students.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</div><div class="line">        student.add(item);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">exports.add = add;</div></pre></td></tr></table></figure></p><p>4.创建index.js，调用klass模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> klass = <span class="built_in">require</span>(<span class="string">'./klass'</span>);</div><div class="line"></div><div class="line">klass.add(<span class="string">'Lily'</span>, [<span class="string">'hoho'</span>, <span class="string">'xixi'</span>]);</div></pre></td></tr></table></figure></p><p>最终，在命令行中执行<code>node index.js</code>，输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  school node index.js</div><div class="line">Add teache:Lily</div><div class="line">Add student:hoho</div><div class="line">Add student:xixi</div></pre></td></tr></table></figure></p><h1 id="Node的API"><a href="#Node的API" class="headerlink" title="Node的API"></a>Node的API</h1><h2 id="URL网址解析"><a href="#URL网址解析" class="headerlink" title="URL网址解析"></a>URL网址解析</h2><p><strong>url解析</strong><br><code>url.parse(urlString, 是否把query转为对象, 是否识别未知协议的url);</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; url</div><div class="line">&#123; Url: [Function: Url],</div><div class="line">  parse: [Function: urlParse],</div><div class="line">  resolve: [Function: urlResolve],</div><div class="line">  resolveObject: [Function: urlResolveObject],</div><div class="line">  format: [Function: urlFormat],</div><div class="line">  URL: [Function: URL],</div><div class="line">  URLSearchParams: [Function: URLSearchParams],</div><div class="line">  domainToASCII: [Function: domainToASCII],</div><div class="line">  domainToUnicode: [Function: domainToUnicode] &#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; url.parse(&apos;http://www.imooc.com/video/6710?form=scott#loor1&apos;)</div><div class="line">Url &#123;</div><div class="line">  protocol: &apos;http:&apos;,</div><div class="line">  slashes: true,</div><div class="line">  auth: null,</div><div class="line">  host: &apos;www.imooc.com&apos;,</div><div class="line">  port: null,</div><div class="line">  hostname: &apos;www.imooc.com&apos;,</div><div class="line">  hash: &apos;#loor1&apos;,</div><div class="line">  search: &apos;?form=scott&apos;,</div><div class="line">  query: &apos;form=scott&apos;,</div><div class="line">  pathname: &apos;/video/6710&apos;,</div><div class="line">  path: &apos;/video/6710?form=scott&apos;,</div><div class="line">  href: &apos;http://www.imooc.com/video/6710?form=scott#loor1&apos; &#125;</div></pre></td></tr></table></figure><p><strong>url格式化</strong><br><code>url.format({})</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; url.format(&#123;</div><div class="line">...   protocol: &apos;http:&apos;,</div><div class="line">...   slashes: true,</div><div class="line">...   auth: null,</div><div class="line">...   host: &apos;www.imooc.com&apos;,</div><div class="line">...   port: null,</div><div class="line">...   hostname: &apos;www.imooc.com&apos;,</div><div class="line">...   hash: &apos;#loor1&apos;,</div><div class="line">...   search: &apos;?form=scott&apos;,</div><div class="line">...   query: &apos;form=scott&apos;,</div><div class="line">...   pathname: &apos;/video/6710&apos;,</div><div class="line">...   path: &apos;/video/6710?form=scott&apos;,</div><div class="line">...   href: &apos;http://www.imooc.com/video/6710?form=scott#loor1&apos; &#125;)</div><div class="line">&apos;http://www.imooc.com/video/6710?form=scott#loor1&apos;</div></pre></td></tr></table></figure></p><p><strong>url拼接</strong><br><code>url.resolve(str1, str2)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; url.resolve(&apos;http://immoc.com/&apos;, &apos;/course/list&apos;)</div><div class="line">&apos;http://immoc.com/course/list&apos;</div></pre></td></tr></table></figure></p><h2 id="querystring参数解析"><a href="#querystring参数解析" class="headerlink" title="querystring参数解析"></a>querystring参数解析</h2><p><strong>参数序列化</strong><br><code>querystring.stringify({}, 参数之间的连接符-默认为&amp;, key和value之间的符号-默认=)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; querystring.stringify(&#123;name:&apos;scott&apos;, course:[&apos;jade&apos;,&apos;node&apos;], from: &apos;&apos;&#125;)</div><div class="line">&apos;name=scott&amp;course=jade&amp;course=node&amp;from=&apos;</div><div class="line"></div><div class="line">&gt; querystring.stringify(&#123;name:&apos;scott&apos;, course:[&apos;jade&apos;,&apos;node&apos;], from: &apos;&apos;&#125;, &apos;,&apos;)</div><div class="line">&apos;name=scott,course=jade,course=node,from=&apos;</div><div class="line"></div><div class="line">&gt; querystring.stringify(&#123;name:&apos;scott&apos;, course:[&apos;jade&apos;,&apos;node&apos;], from: &apos;&apos;&#125;, &apos;,&apos;,&apos;:&apos;)</div><div class="line">&apos;name:scott,course:jade,course:node,from:&apos;</div></pre></td></tr></table></figure></p><p><strong>参数反序列化</strong><br><code>querystring.parse(‘’, 参数之间的连接符-默认为&amp;, key和value之间的符号-默认=)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; querystring.parse(&apos;name=scott&amp;course=jade&amp;course=node&amp;from=&apos;)</div><div class="line">&#123; name: &apos;scott&apos;, course: [ &apos;jade&apos;, &apos;node&apos; ], from: &apos;&apos; &#125;</div></pre></td></tr></table></figure></p><p><strong>转义</strong><br><code>querystring.escape(str)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; querystring.escape(&apos;&lt;哈哈&gt;&apos;)</div><div class="line">&apos;%3C%E5%93%88%E5%93%88%3E&apos;</div></pre></td></tr></table></figure></p><p> <strong>反转义</strong><br> <code>querystring.unescape</code><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> &gt; querystring.unescape(&apos;%3C%E5%93%88%E5%93%88%3E&apos;)</div><div class="line">&apos;&lt;哈哈&gt;&apos;</div></pre></td></tr></table></figure></p><h2 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h2><p>1.http客户端发起请求，创建端口<br>2.http服务器在端口监听客户端的请求<br>3.http服务器向客户端返回状态和内容</p><p><strong>浏览器发起请求到步骤</strong><br>1.Chrome搜索自身的DNS缓存<br>2.搜索操作系统的DNS缓存<br>3.读取本地的Host文件<br>4.浏览器发起一个DNS一个系统调用（向运营商发起，下面小节步骤）<br>5.浏览器获得域名对应的IP地址后，发起HTTP的三次握手<br>6.TCP/IP连接建立起来后，浏览器就可以向服务器发送HTTP请求了<br>7.服务器端接受到这个请求，根据路径参数，经过后端处理后，把处理后的一个结果的数据返回给浏览器<br>8.浏览器获取到目标网址的数据，例如返回一个HTML文件,HTML文档内的JS/CSS/图片静态资源同样也是一个个HTTP请求，也要包括上述步骤<br>9.浏览器根据获取到的资源对页面进行渲染，最终把网页呈献给用户</p><p><strong>运营商的DNS服务器</strong><br>1.宽带运营商服务器查看本身缓存<br>2.运营商服务器代替浏览器发起一个迭代的DNS解析请求，运营商服务器把结果返回给操作系统内核同时缓存起来，操作系统内核把结果返回给浏览器</p><p><strong>http头和正文信息</strong><br>HTTP头发送的是一些附加的信息：内容类型、服务器发送相应的日期、HTTP状态码。<br>正文就是用户提交的表单数据。</p><p>1、什么是回调函数？<br>回调是异步编程时的基础，将后续逻辑封装成起始函数的参数，逐层嵌套<br>2、什么事同步/异步？<br>同步：发送方发送数据后，等待接收方发回响应以后才发下一个数据包的通讯方式<br>异步：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式<br>3、什么事I/O?<br>文件系统里面 磁盘的写入（in）磁盘的读取（out）<br>4、什么是单线程/多线程？<br>一次只能执行一个程序叫做单线程<br>一次能执行多个程序叫做多线程<br>5、什么是阻塞/非阻塞？<br>阻塞：前一个程序未执行完就得一直等待<br>非阻塞：前一个程序未执行完时可以挂起，继续执行其他程序，等到使用时再执行<br>6、什么是事件？<br>一个触发动作（例如点击按钮）<br>7、什么是事件驱动？<br>一个触发动作引起的操作（例如点击按钮后弹出一个对话框）<br>8、什么是基于事件驱动的回调？<br>为了某个事件注册了回调函数，但是这个回调函数不是马上执行，只有当事件发生的时候，才会调用回掉函数，这种函数执行的方式叫做事件驱动~这种注册回掉就是基于事件驱动的回调，如果这些回调和异步I/O（数据写入、读取）操作相关，可以看作是基于回调的异步I/O。只不过这种回调在nodejs中是由事件来驱动的<br>9、什么是事件循环？<br>事件循环Eventloop，倘若有大量的异步操作，如一些I/O的耗时操作，甚至是一些定时器控制的延时操作，它们完成的时候都要调用相应的回调函数，而从完成一些密集的任务，而又不会阻塞整个程序执行的流程，此时需要一种机制来管理，这种机制叫做事件循环<br>总而言之，管理大量异步操作的机制叫做事件循环</p><p><strong>作用域和上下文</strong><br>作用域：与调用函数,访问变量的能力有关 作用域分为：局部和全局（在局部作用域里可以访问到全局作用域的变量，但在局部作用域外面就访问不到局部作用里面所设定的变量）</p><p>上下文：与this关键字有关 是调用当前可执行代码的引用<br>       this总是指向调用这个的方法的对象<br>js里的this 通常是当前函数的拥有者<br>this 是js的一个关键字 代表函数运行时自动生成的一个内部对象 只能在函数内部使用</p><p>1.作为对象的方法<br>this在方法内部，this就指向调用这个方法的对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pet =  &#123;</div><div class="line">    words: <span class="string">'...'</span>,</div><div class="line">    speak: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.words);</div><div class="line">        <span class="built_in">console</span>.log(pet===<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">pet.speak();</div></pre></td></tr></table></figure></p><p>2.函数的调用<br>this指向执行环境中的全局对象（浏览器-&gt;window  nodejs-&gt;global）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">pets</span>(<span class="params">words</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.words = words;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.words);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>===global);</div><div class="line">&#125;</div><div class="line"></div><div class="line">pets(<span class="string">'...'</span>);</div></pre></td></tr></table></figure></p><p>3.构造函数<br>this所在的方法被实例对象所调用，那么this就指向这个实例对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">petss</span>(<span class="params">words</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.words = words;</div><div class="line">    <span class="keyword">this</span>.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.words);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> petss(<span class="string">'miao'</span>);</div><div class="line">cat.speak();</div></pre></td></tr></table></figure></p><p>更改上下文方法(更改this指向的内容,可方便地实现继承)：</p><ul><li><p>call(list);</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> pet = &#123;</div><div class="line">    words: <span class="string">'...'</span>,</div><div class="line">    speak: <span class="function"><span class="keyword">function</span>(<span class="params">say</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(say + <span class="string">' '</span> + <span class="keyword">this</span>.words);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> dog = &#123;</div><div class="line">    words: <span class="string">'wang'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//通过使用call方法，将pet的上下文指向为dog内部</span></div><div class="line">pet.speak.call(dog, <span class="string">'Speak'</span>);</div></pre></td></tr></table></figure></li><li><p>apply(array);<br>根据call()、apply()改变上下文this指向的特性,也可以方便实现继承。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">words</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.words = words;</div><div class="line">    <span class="keyword">this</span>.speak = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.words);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">words</span>) </span>&#123;</div><div class="line">    Pet.call(<span class="keyword">this</span>, words);</div><div class="line">    <span class="comment">//Pet.apply(this. arguments);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog(<span class="string">'wang'</span>);</div><div class="line">dog.speak();</div></pre></td></tr></table></figure></li></ul><p><strong>事件Events</strong><br>a.EventEmitter支持多个事件监听，最大为10，也可以自定义最大数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加监听</span></div><div class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</div><div class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> EventEmitter();</div><div class="line">instance.on(<span class="string">'event'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">arguments</span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure></p><p>b.如果超过十个也能执行，不过有可能会造成内存泄漏<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义最大数</span></div><div class="line"><span class="comment">//每个setMaxListeners针对的是一个特定事件：即event1,event2,... 默认最大都为10,本例为num</span></div><div class="line">instance.setMaxListeners(num);</div></pre></td></tr></table></figure></p><pre><code>c.事件监听之后，需要emit(发射,发出)才会执行</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">instance.emit(<span class="string">'event'</span>,<span class="built_in">arguments</span>)</div></pre></td></tr></table></figure><p>d.判断是否监听<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = instance.emit(<span class="string">'event'</span>,<span class="built_in">arguments</span>)</div><div class="line"><span class="built_in">console</span>.log(a)   <span class="comment">//打印出来的是布尔值true or false</span></div></pre></td></tr></table></figure></p><p>e.移除监听事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//移除单个事件监听</span></div><div class="line">instance.removeListener(<span class="string">'event'</span>,funcName)<span class="comment">//移除事件需具名函数，匿名函数不行</span></div><div class="line"></div><div class="line"><span class="comment">//移除多个事件监听</span></div><div class="line">instance.removeAllListerner()<span class="comment">//不传参表示移除所有事件监听</span></div><div class="line">instance.removeAllListerner(<span class="string">'event'</span>)<span class="comment">//移除特定event的所有事件监听</span></div></pre></td></tr></table></figure></p><p>f.计算事件监听数量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种</span></div><div class="line">instance.listeners(<span class="string">'event'</span>).length</div><div class="line"></div><div class="line"><span class="comment">//第二种</span></div><div class="line">EventEmitter.listenerCount(instance,<span class="string">'event'</span>)</div></pre></td></tr></table></figure></p><p><strong>Http请求的性能测试</strong><br>1.如果没有安装Apache的话，首先要安装Apache。<br>2.mac直接在终端命令行中运行命令 <code>ab -n1000 -c10 <a href="http://localhost:2017/" target="_blank" rel="external">http://localhost:2017/</a></code> 即测试本地服务的性能。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">    res.write(<span class="string">'Hello nodejs'</span>);</div><div class="line">    res.end();</div><div class="line">&#125;).listen(<span class="number">2017</span>)</div></pre></td></tr></table></figure></p><p>3.ab -n1000 -c10 url   即测试任意url的性能<br>-n1000 总请求数1000 默认值1<br>-c10 并发数10  默认值1<br>-t 测试的时间<br>-p post数据文件</p><p>##小实践<br><strong>http小爬虫</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="string">'http://www.imooc.com/learn/901'</span>;</div><div class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterChapters</span>(<span class="params">html</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> $ = cheerio.load(html);</div><div class="line">    <span class="keyword">var</span> chapters = $(<span class="string">'.learnChapter'</span>);</div><div class="line">    <span class="keyword">var</span> courseData = [];</div><div class="line">chapters.each(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> chapter = $(<span class="keyword">this</span>);</div><div class="line"><span class="keyword">var</span> chapterTitle = chapter.find(<span class="string">'strong'</span>).text();</div><div class="line"><span class="keyword">var</span> videos = chapter.find(<span class="string">'.video'</span>).children(<span class="string">'li'</span>);</div><div class="line"><span class="keyword">var</span> chapterData = &#123;</div><div class="line">chapterTitle: chapterTitle,</div><div class="line">videos: []</div><div class="line">&#125;</div><div class="line">        videos.each(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> video = $(<span class="keyword">this</span>).find(<span class="string">'.studyvedio'</span>);</div><div class="line"><span class="keyword">var</span> videoTitle = video.text();</div><div class="line"><span class="keyword">var</span> id = video.attr(<span class="string">'href'</span>).split(<span class="string">'video/'</span>)[<span class="number">1</span>];</div><div class="line">chapterData.videos.push(&#123;<span class="attr">title</span>: videoTitle,<span class="attr">id</span>: id&#125;);</div><div class="line">&#125;);</div><div class="line">courseData.push(chapterData);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">return</span> courseData;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printCourseInfo</span>(<span class="params">courseData</span>)</span>&#123;</div><div class="line">courseData.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> chapterTitle = item.chapterTitle;</div><div class="line"><span class="built_in">console</span>.log(chapterTitle + <span class="string">'\n'</span>);</div><div class="line">item.videos.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">video</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'['</span> + video.id + <span class="string">']'</span> + video.title + <span class="string">'\n'</span>);</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>评论灌水</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http =<span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> querystring =<span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> postData = querystring.stringify(&#123;</div><div class="line"><span class="string">'content'</span>:<span class="string">'小路人注水测试评论'</span>,</div><div class="line"><span class="string">'mid'</span>:<span class="number">8837</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> options=&#123;</div><div class="line">hostname : <span class="string">'www.imooc.com'</span>,</div><div class="line">port:<span class="number">80</span>,</div><div class="line">path:<span class="string">'/course/docomment'</span>,</div><div class="line">method:<span class="string">'POST'</span>,</div><div class="line">headers:&#123;消息头&#125;);</div><div class="line"><span class="keyword">var</span> req=http.request(options ,<span class="function"><span class="keyword">function</span> (<span class="params">res</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Status: '</span>+res.statusCode);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'headers: '</span>+<span class="built_in">JSON</span>.stringify(res.headers));</div><div class="line">res.on(<span class="string">'data'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(Buffer.isBuffer(chunk));</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> chunk);</div><div class="line">&#125;);</div><div class="line">res.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'小路人注水评论完毕！'</span>);</div><div class="line">&#125;);</div><div class="line">&#125;);</div><div class="line">req.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Error: '</span>+e.message);</div><div class="line">&#125;);</div><div class="line">req.write(postData);</div><div class="line">req.end();</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是一个nodejs的学习笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="http://our-orginization.github.io/categories/Node/"/>
    
    
      <category term="javascript" scheme="http://our-orginization.github.io/tags/javascript/"/>
    
      <category term="Node" scheme="http://our-orginization.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap</title>
    <link href="http://our-orginization.github.io/2017/09/18/Bootstrap/"/>
    <id>http://our-orginization.github.io/2017/09/18/Bootstrap/</id>
    <published>2017-09-17T16:00:00.000Z</published>
    <updated>2018-02-08T07:21:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了Boostrap的全局样式和常用组件。</p><a id="more"></a><h1 id="Bootstrap的特性"><a href="#Bootstrap的特性" class="headerlink" title="Bootstrap的特性"></a>Bootstrap的特性</h1><ul><li>响应式设计</li><li>栅格布局</li><li>完整的类库</li><li>JQuery插件</li><li>不同的使用场景</li></ul><h1 id="从Hello-world开始"><a href="#从Hello-world开始" class="headerlink" title="从Hello world开始"></a>从Hello world开始</h1><p>程序员学习一门语言，第一个例子一定是著名的<strong>Hello world</strong>，那么，我们先来准备一个<strong>Hello world</strong>吧！<br>首先，到<a href="http://v3.bootcss.com/getting-started/#download" target="_blank" rel="external">Bootstrap中文网</a>下载用于生产环境的Bootstrap。<br>Bootstrap 提供了两种形式的压缩包，在下载下来的压缩包内可以看到以下目录和文件，这些文件按照类别放到了不同的目录内，并且提供了压缩与未压缩两种版本。</p><blockquote><p>Bootstrap 插件全部依赖 jQuery<br>请注意，Bootstrap 的所有 JavaScript 插件都依赖 jQuery，因此 <strong>jQuery 必须在 Bootstrap 之前</strong>引入，就像在基本模版中所展示的一样。在 bower.json 文件中 列出了 Bootstrap 所支持的 jQuery 版本。</p></blockquote><p>下载压缩包之后，将其解压缩到任意目录即可看到以下（压缩版的）目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">bootstrap/</div><div class="line">├── css/</div><div class="line">│   ├── bootstrap.css</div><div class="line">│   ├── bootstrap.css.map</div><div class="line">│   ├── bootstrap.min.css</div><div class="line">│   ├── bootstrap.min.css.map</div><div class="line">│   ├── bootstrap-theme.css</div><div class="line">│   ├── bootstrap-theme.css.map</div><div class="line">│   ├── bootstrap-theme.min.css</div><div class="line">│   └── bootstrap-theme.min.css.map</div><div class="line">├── js/</div><div class="line">│   ├── bootstrap.js</div><div class="line">│   └── bootstrap.min.js</div><div class="line">└── fonts/</div><div class="line">    ├── glyphicons-halflings-regular.eot</div><div class="line">    ├── glyphicons-halflings-regular.svg</div><div class="line">    ├── glyphicons-halflings-regular.ttf</div><div class="line">    ├── glyphicons-halflings-regular.woff</div><div class="line">    └── glyphicons-halflings-regular.woff2</div></pre></td></tr></table></figure></p><p>可以直接引用bootstrap的预编译文件，但是要注意的是，<strong>Bootstrap是要依赖JQuery的</strong>，因此，需要在引用Bootstrap的js之前引用JQuery。<br>这里使用的是Bootstrap3，需要使用的JQuery版本需要高于1.3。</p><p>这样，就完成了我们的第一个例子–Hello world<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/bootstrap-theme.min.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery-3.2.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>这里要强调的是，Bootstrap 使用到的某些 HTML 元素和 CSS 属性需要将页面设置为 HTML5 文档类型。在你项目中的每个页面都要参照下面的格式进行设置。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>另外，<strong>Bootdtrap是移动设备优先的</strong>，针对移动设备的样式融合进了框架的每个角落，而不是增加一个额外的文件。<br>为了确保适当的绘制和触屏缩放，需要在 <code>head</code>标签 之中添加 viewport 元数据标签。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</div></pre></td></tr></table></figure></p><h1 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h1><p>传统前端开发过程中的问题：</p><ul><li>重复，复杂，无意义的命名</li><li>结构冗余，胡乱嵌套</li><li>页面错乱</li></ul><p>Bootstrap全局样式的特点：</p><ul><li>代码整洁</li><li>风格统一</li><li>美观易用</li></ul><h2 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h2><p>通过一系列行（row）和列（column）的组合来创建页面布局。<br><strong>工作原理</strong></p><ul><li><strong>“行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中</strong>，以便为其赋予合适的排列（aligment）和内补（padding）。</li><li>通过“行（row）”在水平方向创建一组“列（column）”。</li><li>你的内容应当放置于“列（column）”内，并且，<strong>只有“列（column）”可以作为行（row）”的直接子元素</strong>。</li><li>类似 <code> .row </code>和 <code>.col-xs-4</code> 这种预定义的类，可以用来快速创建栅格布局。</li><li>通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。通过为 <code>.row</code> 元素设置负值 margin 从而抵消掉为 <code>.container</code> 元素设置的 padding，也就间接为“行（row）”所包含的“列（column）”抵消掉了padding。</li><li>负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</li><li>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。例如，三个等宽的列可以使用三个 <code>.col-xs-4</code> 来创建。</li><li>如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</li><li>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何 <code>.col-md-<em> </em></code>栅格类适用于与屏幕宽度大于或等于分界点大小的设备 ， 并且针对小屏幕设备覆盖栅格类。 因此，在元素上应用任何<code> .col-lg- </code>不存在， 也影响大屏幕设备。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 超小屏幕（手机，小于 768px） */</span></div><div class="line"><span class="comment">/* 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 Bootstrap 是移动设备优先的吗？） */</span></div><div class="line"><span class="comment">/* 小屏幕（平板，大于等于 768px） */</span></div><div class="line">@<span class="keyword">media</span> (min-width: @screen-sm-min) &#123; ... &#125;</div><div class="line"><span class="comment">/* 中等屏幕（桌面显示器，大于等于 992px） */</span></div><div class="line">@<span class="keyword">media</span> (min-width: @screen-md-min) &#123; ... &#125;</div><div class="line"><span class="comment">/* 大屏幕（大桌面显示器，大于等于 1200px） */</span></div><div class="line">@<span class="keyword">media</span> (min-width: @screen-lg-min) &#123; ... &#125;</div></pre></td></tr></table></figure><p><strong>水平布局</strong><br>使用单一的一组 <code>.col-md-*</code> 栅格类，就可以创建一个基本的栅格系统，在手机和平板设备上一开始是堆叠在一起的（超小屏幕到小屏幕这一范围），在桌面（中等）屏幕设备上变为水平排列。所有“列（column）必须放在 ” <code>.row</code>内。<br>将最外面的布局元素 <code>.container </code>修改为 <code>.container-fluid</code>，就可以将固定宽度的栅格布局转换为 100% 宽度的布局。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span>.col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p1.meituan.net/dpnewvc/bbabd1e87128cc9b56c4fd4ce22e1e6e92121.jpg" width="1000px" height="330px"><br>如果希望在小屏幕设备上列也不要堆叠在一起，可以使用针对超小屏幕定义大类<code>.col-xs-<em></em></code>和为中等屏幕定义的类<code>.col-md-</code>，针对平板设备则是用<code>.col-sm-* </code>这个类。</p><p>如果在一个 .row 内包含的列（column）大于12个，包含多余列（column）的元素将作为一个整体单元被另起一行排列。</p><p><strong>列偏移</strong><br>使用 <code>.col-md-offset-<em></em></code> 类可以将列向右侧偏移。这些类实际是通过使用 <code> </code>选择器为当前元素增加了左侧的边距（margin）。例如，<code>.col-md-offset-4</code> 类将 <code>.col-md-4</code> 元素向右侧偏移了4个列（column）的宽度。<br><img src="https://p1.meituan.net/dpnewvc/f034ae99767bcdd566e2987d9e4ff5fa50992.jpg" width="1000px" height="330px"></p><p><strong>嵌套列</strong><br>为了使用内置的栅格系统将内容再次嵌套，可以通过添加一个新的 <code>.row </code>元素和一系列 <code>.col-sm-<em> </em></code>元素到已经存在的 <code>.col-sm-</code> 元素内。被嵌套的行（row）所包含的列（column）的个数不能超过12（其实，没有要求你必须占满12列）。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-9"</span>&gt;</span></div><div class="line">    Level 1: .col-sm-9</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8 col-sm-6"</span>&gt;</span></div><div class="line">        Level 2: .col-xs-8 .col-sm-6</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-4 col-sm-6"</span>&gt;</span></div><div class="line">        Level 2: .col-xs-4 .col-sm-6</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p0.meituan.net/dpnewvc/fe9ca665624ded927a66a99dca54685c29071.jpg" width="1000px" height="330px"></p><p><strong>列排序</strong><br>通过使用 .col-md-push-<em> 和 .col-md-pull-</em> 类就可以很容易的改变列（column）的顺序。—应用不多</p><h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><p><strong>基本全局样式</strong><br>Bootstrap 排版、链接样式设置了基本的全局样式。分别是：</p><ul><li>为 <code>body</code> 元素设置 <code>background-color: #fff</code>;</li><li>使用 <code>@font-family-base</code>、<code>@font-size-base</code> 和 <code>@line-height-base</code> 变量作为排版的基本参数;</li><li>为所有链接设置了基本颜色 <code>@link-color</code> ，并且当链接处于 <code>:hover </code>状态时才添加下划线。</li></ul><p><strong>标题</strong><br>标题（h1~h6/.h1~.h6） h1:36px, h2:30px, h3:24px, h4:18px, h5:14px, h6: 12px<br>副标题（small）</p><p>在<code>body</code>标签中输入下面的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;<span class="name">small</span>&gt;</span>小标题<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h1"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h2"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h3"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h4"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h5"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"h6"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p><p>可以看到在span中也可以使用标题的字体。<br><img src="https://p0.meituan.net/dpnewvc/2871abd0a5c74ff645f1ab29b50fdf3232431.png" width="1000px" height="300px"></p><p><strong>文本</strong><br>Bootstrap将全局的<strong>字号设置为14px，行高为1.428</strong>。并给段落（<code>P标签</code>）定义了初始的样式，<strong>默认14px，行高20px，底部间距10px</strong>。而普通网页中的段落字体大小默认为16px。<br>可以通过<code>mark</code>标签实现对文本的黄底显示，通过<code>del</code>标签实现删除线,通过<code>ins</code>或者<code>u</code>实现下划线效果。通过<code>small</code>文字变小，<code>strong</code>文字加粗，<code>em</code>实现斜体。。。这些都是html5中的标签，只不过Bootstrap对样式进行了封装。<br>另外，可以通过添加 <code>.lead</code> 类可以让段落突出显示。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>测试一下段落<span class="tag">&lt;<span class="name">mark</span>&gt;</span>打个马<span class="tag">&lt;/<span class="name">mark</span>&gt;</span><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入文本下划线效果<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>测试一下段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p><p>效果图：<br><img src="https://p0.meituan.net/dpnewvc/90f0f2ea4a06401b44b50bc8815910f914951.png" width="1000px" height="300px"></p><p><strong>对齐</strong><br>靠左对齐 <code>.text-left</code><br>居中对齐 <code>.text-center</code><br>靠右对齐 <code>.text-right</code></p><p><strong>大小写</strong><br>大写转小写 <code>.text-lowercase</code><br>小写转大写 <code>.text-uppercase</code><br>首字母大写 <code>.text-capitalize</code></p><p><strong>缩略语</strong><br>当鼠标悬停在缩写和缩写词上时就会显示完整内容，Bootstrap 实现了对 HTML 的 <abbr> 元素的增强样式。缩略语元素带有 title 属性，外观表现为带有较浅的虚线框，鼠标移至上面时会变成带有“问号”的指针。如想看完整的内容可把鼠标悬停在缩略语上（对使用辅助技术的用户也可见）, 但需要包含 title 属性。<br>为缩略语添加 .initialism 类，可以让 font-size 变得稍微小些。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"HyperText Markup Language"</span> <span class="attr">class</span>=<span class="string">"initialism"</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></div></pre></td></tr></table></figure></abbr></p><p><strong>引用</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>Someone famous in <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Source Title"</span>&gt;</span>Source Title<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p1.meituan.net/dpnewvc/c45688bfdb0a44ed1a7ce9601119dacc39299.jpg" width="1000px" height="300px"><br>通过赋予 .blockquote-reverse 类可以让引用呈现内容右对齐的效果。</p><p><strong>列表</strong><br>列表分为无序列表(ul)和有序liebiao(ol)两种，默认具有<code>list-style</code>样式，即子元素<code>li</code>为逐行展示,可以通过设置 <code>display: inline-block;</code> 并添加少量的内补（padding），将所有元素放置于同一行。<br>另外还有一种带有描述的短语列表，可以通过<code>dl</code>实现，其中<code>dt</code>为短语，<code>dd</code>为描述内容。<br><img src="https://p0.meituan.net/dpnewvc/1882c9abdf6ebb97ac31ee2d8e6a5aef64282.jpg" width="1000px" height="300px"><br><code>.dl-horizontal <code>可以让<code>dl</code> 内的短语及其描述排在一行。开始是像 <code>dl</code> 的默认样式堆叠在一起，随着导航条逐渐展开而排列在一行。<br><img src="https://p1.meituan.net/dpnewvc/7d03f61fd206927687a0736d9b16ebf2105944.jpg" width="1000px" height="300px"></code></code></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>内联代码</strong><br>通过 <code>&lt;code&gt;</code> 标签包裹内联样式的代码片段。<br><strong>用户输入</strong><br>通过 <code>&lt;kbd&gt;</code>  标签标记用户通过键盘输入的内容。<br><strong>代码块</strong><br>多行代码可以使用 <code>&lt;pre&gt;</code> 标签。<br>还可以使用 .pre-scrollable 类，其作用是设置 max-height 为 350px ，并在垂直方向展示滚动条。<br><strong>变量</strong><br>通过 <code>&lt;var&gt;</code> 标签标记变量。<br><strong>程序输出</strong><br>通过 <code>&lt;samp&gt;</code> 标签来标记程序输出的内容。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格 <code>table</code><br>带边框的表格 <code>.table-bordered</code><br>条纹状表格 <code>.table-striped</code><br>悬停变色 <code>.table-hover</code><br>紧凑风格 <code>.table-condensed</code></p><ul><li>.active    鼠标悬停在行或单元格上时所设置的颜色</li><li>.success    标识成功或积极的动作</li><li>.info        标识普通的提示信息或动作</li><li>.warning    标识警告或需要用户注意</li><li>.danger    标识危险或潜在的带来负面影响的动作</li></ul><p><strong>响应式</strong><br>将任何 .table 元素包裹在 .table-responsive 元素内，即可创建响应式表格，其会在小屏幕设备上（小于768px）水平滚动。当屏幕大于 768px 宽度时，水平滚动条消失。</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>Bootstrap给HTML大部分表单都设置了默认样式，我们可以给表单添加相应类名，以实现表单的水平排列和个性化定制。</p><ul><li>所有设置了 .form-control 类的 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 元素都将被默认设置宽度属性为 width: 100%;。 将 label 元素和前面提到的控件包裹在 .form-group 中可以获得最好的排列。</li><li>每个<code>&lt;form&gt;</code>标签为一套表单，每个.form-group类为一个表单组，包含一个标签合一个表单元素。<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-g</span></span></div><div class="line"><span class="tag"><span class="string">roup"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputEmail1"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputEmail1"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputPassword1"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputPassword1"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputFile"</span>&gt;</span>File input<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"exampleInputFile"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>Example block-level help text here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Check me out</div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p><img src="https://p0.meituan.net/dpnewvc/1fb77f141ca9206130b7791f57b1351e41332.png" width="1000px" height="300px"></p><ul><li><p>为 <code>&lt;form&gt;</code> 元素添加 .form-inline 类可使其内容左对齐并且表现为 inline-block 级别的控件。只适用于视口（viewport）至少在 768px 宽度时（视口宽度再小的话就会使表单折叠）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputName2"</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputName2"</span> <span class="attr">placeholder</span>=<span class="string">"Jane Doe"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"exampleInputEmail2"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputEmail2"</span> <span class="attr">placeholder</span>=<span class="string">"jane.doe@example.com"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Send invitation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>如果你没有为每个输入控件设置 label 标签，屏幕阅读器将无法正确识别。对于这些内联表单，你可以通过为 label 设置 .sr-only 类将其隐藏。还有一些辅助技术提供label标签的替代方案，比如 aria-label、aria-labelledby 或 title 属性。如果这些都不存在，屏幕阅读器可能会采取使用 placeholder 属性，如果存在的话，使用占位符来替代其他的标记，但要注意，这种方法是不妥当的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">for</span>=<span class="string">"exampleInputEmail3"</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputEmail3"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">for</span>=<span class="string">"exampleInputPassword3"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"exampleInputPassword3"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Remember me</div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>通过为表单添加 .form-horizontal 类，并联合使用 Bootstrap 预置的栅格类，可以将 label 标签和控件组水平并排布局。这样做将改变 .form-group 的行为，使其表现为栅格系统中的行（row），因此就无需再额外添加 .row 了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputEmail3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputEmail3"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputPassword3"</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputPassword3"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Remember me</div><div class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-offset-2 col-sm-10"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></li></ul><p><strong>支持的控件</strong><br>1.输入框–input<br>包括大部分表单控件、文本输入域控件，还支持所有 HTML5 类型的输入控件： text、password、datetime、datetime-local、date、month、time、week、number、email、url、search、tel 和 color。</p><blockquote><p>只有正确设置了 type 属性的输入控件才能被赋予正确的样式。</p></blockquote><p>2.文本域–textarea<br>支持多行文本的表单控件。可根据需要改变 rows 属性。</p><p>3.单选和多选<br>单选框和多选框的默认外观是纵向堆叠在一起的。<br>通过将 <code>.checkbox-inline</code> 或 <code>.radio-inline</code> 类应用到一系列的多选框（checkbox）或单选框（radio）控件上，可以使这些控件排列在一行。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"inlineCheckbox1"</span> <span class="attr">value</span>=<span class="string">"option1"</span>&gt;</span> 1</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"inlineCheckbox2"</span> <span class="attr">value</span>=<span class="string">"option2"</span>&gt;</span> 2</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"inlineCheckbox3"</span> <span class="attr">value</span>=<span class="string">"option3"</span>&gt;</span> 3</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"inlineRadioOptions"</span> <span class="attr">id</span>=<span class="string">"inlineRadio1"</span> <span class="attr">value</span>=<span class="string">"option1"</span>&gt;</span> 1</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"inlineRadioOptions"</span> <span class="attr">id</span>=<span class="string">"inlineRadio2"</span> <span class="attr">value</span>=<span class="string">"option2"</span>&gt;</span> 2</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"inlineRadioOptions"</span> <span class="attr">id</span>=<span class="string">"inlineRadio3"</span> <span class="attr">value</span>=<span class="string">"option3"</span>&gt;</span> 3</div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p1.meituan.net/dpnewvc/7657853e404ba1b871582cdce1054c208624.jpg" width="1000px" height="300px"><br>如果需要 <label> 内没有文字，输入框（input）正是你所期望的。 目前只适用于非内联的 checkbox 和 radio。 请记住，仍然需要为使用辅助技术的用户提供某种形式的 label（例如，使用 aria-label）。<code>aria-label=”…”</code></label></p><p>4.下拉列表<br>对于标记了 multiple 属性的 <code>&lt;select&gt;</code> 控件来说，默认显示多选项。</p><p><strong>静态控件</strong><br>如果需要在表单中将一行纯文本和 <code>&lt;label&gt;</code>  元素放置于同一行，为 <code>&lt;p&gt;</code>  元素添加 <code>.form-control-static</code> 类即可。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"form-control-static"</span>&gt;</span>email@example.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p><p>表单控件后面友好的帮助信息可以在<code>&lt;span&gt;</code>标签中增加<code>.help-block</code>类名。</p><p><strong>校验状态</strong><br>Bootstrap 对表单控件的校验状态，如 error、warning 和 success 状态，都定义了样式。使用时，添加 <code>.has-warning</code>、<code>.has-error</code> 或 <code>.has-success</code> 类到这些控件的父元素即可。任何包含在此元素之内的 <code>.control-label</code>、<code>.form-control </code>和 <code>.help-block</code> 元素都将接受这些校验状态的样式。</p><p><strong>在表单输入区域内添加额外的图标</strong><br>你还可以针对校验状态为输入框添加额外的图标。只需设置相应的 <code>.has-feedback</code> 类并添加正确的图标即可。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-success has-feedback"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span> <span class="attr">for</span>=<span class="string">"inputSuccess2"</span>&gt;</span>Input with success<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputSuccess2"</span> <span class="attr">aria-describedby</span>=<span class="string">"inputSuccess2Status"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-ok form-control-feedback"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inputSuccess2Status"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(success)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-warning has-feedback"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span> <span class="attr">for</span>=<span class="string">"inputWarning2"</span>&gt;</span>Input with warning<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputWarning2"</span> <span class="attr">aria-describedby</span>=<span class="string">"inputWarning2Status"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-warning-sign form-control-feedback"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inputWarning2Status"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(warning)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-error has-feedback"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span> <span class="attr">for</span>=<span class="string">"inputError2"</span>&gt;</span>Input with error<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputError2"</span> <span class="attr">aria-describedby</span>=<span class="string">"inputError2Status"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-remove form-control-feedback"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inputError2Status"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(error)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group has-success has-feedback"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span> <span class="attr">for</span>=<span class="string">"inputGroupSuccess1"</span>&gt;</span>Input group with success<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"inputGroupSuccess1"</span> <span class="attr">aria-describedby</span>=<span class="string">"inputGroupSuccess1Status"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-ok form-control-feedback"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inputGroupSuccess1Status"</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(success)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p0.meituan.net/dpnewvc/0ca9c1035e4766088e3f4dc8b272fcdd80194.jpg" width="1000px" height="300px"></p><p><strong>控件尺寸</strong><br>通过 <code>.input-lg</code> 类似的类可以为控件设置高度，通过 <code>.col-lg-<em></em></code> 类似的类可以为控件设置宽度。<br>大号 <code>.input-lg</code><br>小号 <code>.input-sm</code><br>通过添加 <code>.form-group-lg</code> 或 <code>.form-group-sm </code>类，为 <code>.form-horizontal</code> 包裹的 label 元素和表单控件快速设置尺寸<br>用栅格系统中的列（column）包裹输入框或其任何父元素，都可很容易的为其设置宽度。<code>.col-xs-</code></p><p><strong>按钮</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-link"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p0.meituan.net/dpnewvc/3ba18629d1d8ddff5af049ea23af943b14120.png" width="1000px" height="300px"><br>需要让按钮具有不同尺寸吗？使用 .btn-lg、.btn-sm 或 .btn-xs 就可以获得不同尺寸的按钮。<br>通过给按钮添加 .btn-block 类可以将其拉伸至父元素100%的宽度，而且按钮也变为了块级（block）元素。</p><h2 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h2><p><strong>图片</strong><br>在 Bootstrap 版本 3 中，通过为图片添加 <code>.img-responsive</code> 类可以让图片支持响应式布局。如果需要让使用了 <code>.img-responsive</code> 类的图片水平居中，请使用 <code>.center-block</code> 类。<br><strong>修改图片形状</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-rounded"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-circle"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span> <span class="attr">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>可用的类</strong><br><img src="https://p0.meituan.net/dpnewvc/463f17aaedefdc98beceaa66cd814cde143534.jpg" width="1000px" height="300px"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.visible-*-block</div><div class="line">.visible-*-inline</div><div class="line">.visible-*-inline-block</div></pre></td></tr></table></figure></p><h2 id="辅助类"><a href="#辅助类" class="headerlink" title="辅助类"></a>辅助类</h2><p><strong>文本颜色</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-success"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-info"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-warning"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-danger"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>背景色</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-success"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-info"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-warning"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-danger"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>关闭模态框和警告框</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>三角下拉图标</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>快速浮动</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-left"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>让内容块居中</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-block"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>清除浮动</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>显示或隐藏内容</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"show"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>将下拉菜单触发器和下拉菜单都包裹在 <code>.dropdown</code> 里，或者另一个声明了 <code>position: relative;</code> 的元素。然后加入组成菜单的 HTML 代码。<br>通过为下拉菜单的父元素设置 <code>.dropup</code> 类，可以让菜单向上弹出（默认是向下弹出的）。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"dropdownMenu1"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    Dropdown</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"dropdownMenu1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="comment">&lt;!--分割线 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p1.meituan.net/dpnewvc/e6573589543dc67bc355a4ce0b1def3b24537.jpg" width="1000px" height="300px"><br>为<code> .dropdown-menu</code> 添加 <code>.dropdown-menu-right</code> 类可以让菜单右对齐。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu dropdown-menu-right"</span> <span class="attr">aria-labelledby</span>=<span class="string">"dLabel"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p><p>为下拉菜单中的 <code>li</code> 元素添加 .disabled 类，可以禁用相应的菜单项。</p><h2 id="按钮组"><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h2><p>通过按钮组容器<code>.btn-group</code>把一组按钮放在同一行里。<br>让一组按钮垂直堆叠排列显示而不是水平排列<code>.btn-group-vertical</code><br>让一组按钮拉长为相同的尺寸，填满父元素的宽度<code>.btn-group-justified</code><br>把一组 <code>.btn-group</code> 组合进一个 <code>.btn-toolbar</code> 中就可以做成更复杂的组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-toolbar"</span> <span class="attr">role</span>=<span class="string">"toolbar"</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">role</span>=<span class="string">"group"</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">role</span>=<span class="string">"group"</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">role</span>=<span class="string">"group"</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p0.meituan.net/dpnewvc/fef193c1536ac3b0a913ec3416de1bb210347.jpg" width="1000px" height="300px"><br>按钮组修改尺寸：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-lg"</span> <span class="attr">role</span>=<span class="string">"group"</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">role</span>=<span class="string">"group"</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-sm"</span> <span class="attr">role</span>=<span class="string">"group"</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-xs"</span> <span class="attr">role</span>=<span class="string">"group"</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>想要把下拉菜单混合到一系列按钮中，只须把 .btn-group 放入另一个 .btn-group 中。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">role</span>=<span class="string">"group"</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">role</span>=<span class="string">"group"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">      Dropdown</div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Dropdown link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Dropdown link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="按钮式下拉菜单"><a href="#按钮式下拉菜单" class="headerlink" title="按钮式下拉菜单"></a>按钮式下拉菜单</h2><p><strong>单按钮下拉菜单</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Single button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    Action <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p0.meituan.net/dpnewvc/32b89b485f7506f507d179a440476e6f27455.jpg" width="1000px" height="300px"><br><strong>分裂式按钮下拉菜单</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Split button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle Dropdown<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p0.meituan.net/dpnewvc/e36d156025e0fa26674472a078aae91428882.jpg" width="1000px" height="300px"><br>给父元素添加 .dropup 类就能使触发的下拉菜单朝上方打开。<br><strong>尺寸</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.btn-lg</span></div><div class="line"><span class="selector-class">.btn-sm</span></div><div class="line"><span class="selector-class">.btn-xs</span></div></pre></td></tr></table></figure></p><h2 id="输入框组"><a href="#输入框组" class="headerlink" title="输入框组"></a>输入框组</h2><p>通过在文本输入框 <code>input</code> 前面、后面或是两边加上文字或按钮，可以实现对表单控件的扩展。为 <code>.input-group</code> 赋予 <code>.input-group-addon</code> 或 <code>.input-group-btn</code> 类，可以给 <code>.form-control</code> 的前面或后面添加额外的元素。<br>可以将多选框，单选框，按钮，按钮式下拉菜单或分裂式按钮下拉菜单作为额外元素添加到输入框组中，使用<code>.input-group-btn</code>类包装。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>$<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">aria-label</span>=<span class="string">"Amount (to the nearest dollar)"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"basic-url"</span>&gt;</span>Your vanity URL<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span> <span class="attr">id</span>=<span class="string">"basic-addon3"</span>&gt;</span>https://example.com/users/<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"basic-url"</span> <span class="attr">aria-describedby</span>=<span class="string">"basic-addon3"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>尺寸</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.input-group-lg</span></div><div class="line"><span class="selector-class">.input-group-sm</span></div><div class="line"><span class="selector-class">.input-group-xs</span></div></pre></td></tr></table></figure></p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>Bootstrap 中的导航组件都依赖同一个 <code>.nav </code> 类，状态类也是共用的。<br>Tab标签页式导航： <code>.nav-tabs</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Messages<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p><p>胶囊式标签页导航： <code>.nav-pills</code>，垂直堆叠只需添加 <code>.nav-stacked</code> 类<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Profile<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Messages<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p><p>在大于 768px 的屏幕上，通过 <code>.nav-justified</code> 类可以很容易的让标签页或胶囊式标签呈现出同等宽度。在小屏幕上，导航链接呈现堆叠样式。<br>对任何导航组件（标签页、胶囊式标签页），都可以添加 <code>.disabled</code> 类，从而实现链接为灰色且没有鼠标悬停效果。</p><p>同样的，导航效果也可以添加下拉菜单，可以参照按钮下拉。</p><h2 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h2><p>导航条是在您的应用或网站中作为导航页头的响应式基础组件。它们在移动设备上可以折叠（并且可开可关），且在视口（viewport）宽度增加时逐渐变为水平展开模式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--品牌图标--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Brand<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>One more separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--表单--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav navbar-right"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another action<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Something else here<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">role</span>=<span class="string">"separator"</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Separated link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.navbar-collapse --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- /.container-fluid --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure></p><p><img src="https://p1.meituan.net/dpnewvc/aa2737fc5d798653898f0468db9421b464104.jpg" width="1000px" height="300px"></p><p><strong>品牌图标</strong><br>将导航条内放置品牌标志的地方替换为 <code>img</code> 元素即可展示自己的品牌图标。由于 .navbar-brand 已经被设置了内补（padding）和高度（height），你需要根据自己的情况添加一些 CSS 代码从而覆盖默认设置。</p><p><strong>表单</strong><br>将表单放置于 <code>.navbar-form</code> 之内可以呈现很好的垂直对齐，并在较窄的视口（viewport）中呈现折叠状态。 使用对齐选项可以规定其在导航条上出现的位置。</p><p><strong>按钮</strong><br>对于不包含在 <code>form</code> 中的 <code>button</code> 元素，加上 <code>.navbar-btn</code> 后，可以让它在导航条里垂直居中。</p><p><strong>文本</strong><br>把文本包裹在 <code>.navbar-text</code> 中时，为了有正确的行距和颜色，通常使用 <code>p</code> 标签。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"navbar-text"</span>&gt;</span>Signed in as Mark Otto<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>非导航链接</strong><br>或许你希望在标准的导航组件之外添加标准链接，那么，使用 <code>.navbar-link</code> 类可以让链接有正确的默认颜色和反色设置。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"navbar-text navbar-right"</span>&gt;</span>Signed in as <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"navbar-link"</span>&gt;</span>Mark Otto<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>左右浮动</strong><br>通过添加 <code>.navbar-left</code> 和 <code>.navbar-right</code> 工具类让导航链接、表单、按钮或文本对齐。两个类都会通过 CSS 设置特定方向的浮动样式。</p><p><strong>固定在顶部</strong><br>添加 <code>.navbar-fixed-top</code> 类可以让导航条固定在顶部，还可包含一个 <code>.container </code>或 <code>.container-fluid</code> 容器，从而让导航条居中，并在两侧添加内补（padding）。</p><p><strong>固定在底部</strong><br>添加 <code>.navbar-fixed-bottom</code> 类可以让导航条固定在底部，并且还可以包含一个 <code>.container</code> 或 <code>.container-fluid</code> 容器，从而让导航条居中，并在两侧添加内补（padding）。</p><p><strong>静止在顶部</strong><br>通过添加 <code>.navbar-static-top</code> 类即可创建一个与页面等宽度的导航条，它会随着页面向下滚动而消失。还可以包含一个 <code>.container</code> 或 <code>.container-fluid</code> 容器，用于将导航条居中对齐并在两侧添加内补（padding）。</p><p><strong>改变导航条颜色</strong><br>通过添加 <code>.navbar-inverse</code> 类可以改变导航条的外观。</p><h2 id="路径导航-面包屑"><a href="#路径导航-面包屑" class="headerlink" title="路径导航(面包屑)"></a>路径导航(面包屑)</h2><p>在一个带有层次的导航结构中标明当前页面的位置。各路径间的分隔符已经自动通过 CSS 的 <code>:before</code> 和 <code>content</code> 属性添加了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Library<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="https://p1.meituan.net/dpnewvc/dd5cbe5d4fe11fcb8486cfda34dfa0e17628.jpg" width="1000px" height="300px"><br>可以给不能点击的链接添加 <code>.disabled</code> 类、给当前页添加 <code>.active</code> 类。<br><code>.pagination-lg</code> 或 <code>.pagination-sm</code> 类提供了额外可供选择的尺寸，添加到 <code>ul</code> 标签。</p><p><strong>上一页和下一页的简单翻页</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>两端对齐</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;larr;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> Older<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Newer <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;rarr;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-success"</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-info"</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-warning"</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-danger"</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="https://p1.meituan.net/dpnewvc/83a138b7b8884b0b26f575a08207373a17133.jpg" width="1000px" height="300px"></p><h2 id="数量标记"><a href="#数量标记" class="headerlink" title="数量标记"></a>数量标记</h2><p>给链接、导航等元素嵌套 <code>&lt;span class=”badge”&gt;</code> 元素，可以很醒目的展示新的或未读的信息条目。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Inbox <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>42<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">  Messages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="巨幕"><a href="#巨幕" class="headerlink" title="巨幕"></a>巨幕</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>bibibibibibibibibi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-lg"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>Learn more<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="缩略图"><a href="#缩略图" class="headerlink" title="缩略图"></a>缩略图</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6 col-md-4"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Thumbnail label<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="警告框"><a href="#警告框" class="headerlink" title="警告框"></a>警告框</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>为警告框添加一个可选的 .alert-dismissible 类和一个关闭按钮。</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning alert-dismissible"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Warning!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> Better check yourself, you're not looking too good.</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p><strong>警告中的链接</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">role</span>=<span class="string">"progressbar"</span> <span class="attr">aria-valuenow</span>=<span class="string">"60"</span> <span class="attr">aria-valuemin</span>=<span class="string">"0"</span> <span class="attr">aria-valuemax</span>=<span class="string">"100"</span> <span class="attr">style</span>=<span class="string">"width: 60%;"</span>&gt;</span></div><div class="line">    60%</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>在展示很低的百分比时，如果需要让文本提示能够清晰可见，可以为进度条设置 min-width 属性。<br><img src="https://p1.meituan.net/dpnewvc/475af00b5fc7ff702374fc05dc48c6d019512.jpg" width="1000px" height="300px"><br>要展示不同效果都进度条<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;progress-bar progress-bar-success&quot;</div><div class="line">&lt;div class=&quot;progress-bar progress-bar-info&quot;</div><div class="line">&lt;div class=&quot;progress-bar progress-bar-warning&quot;</div><div class="line">&lt;div class=&quot;progress-bar progress-bar-danger&quot;</div></pre></td></tr></table></figure></p><p>条纹效果类<code>.progress-bar-striped</code><br>为 <code>.progress-bar-striped</code> 添加 <code>.active</code> 类，使其呈现出由右向左运动的动画效果.<br>把多个进度条放入同一个 .progress 中，使它们呈现堆叠的效果。</p><h2 id="媒体对象"><a href="#媒体对象" class="headerlink" title="媒体对象"></a>媒体对象</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-left media-middle"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"media-object"</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"media-heading"</span>&gt;</span>Middle aligned media<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-left media-middle"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"media-object"</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"media-heading"</span>&gt;</span>Middle aligned media<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">    Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-left media-middle"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></div><div class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"media-object"</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"media-heading"</span>&gt;</span>Middle aligned media<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">            Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo. Cras purus odio, vestibulum in vulputate at, tempus viverra turpis. Fusce condimentum nunc ac nisi vulputate fringilla. Donec lacinia congue felis in faucibus.</div><div class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="https://p1.meituan.net/dpnewvc/eeec5d411b188d5feadf15f3ada50e7d282860.jpg" width="1000px" height="300px"></p><p><strong>对齐</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">media-top</div><div class="line">media-middle</div><div class="line">media-bottom</div></pre></td></tr></table></figure></p><h2 id="列表组"><a href="#列表组" class="headerlink" title="列表组"></a>列表组</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-success"</span>&gt;</span>Dapibus ac facilisis in<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-info"</span>&gt;</span>Cras sit amet nibh libero<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-warning"</span>&gt;</span>Porta ac consectetur ac<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-danger"</span>&gt;</span>Vestibulum at eros<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-success"</span>&gt;</span>Dapibus ac facilisis in<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-info"</span>&gt;</span>Cras sit amet nibh libero<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-warning"</span>&gt;</span>Porta ac consectetur ac<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"list-group-item list-group-item-danger"</span>&gt;</span>Vestibulum at eros<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span>Panel title<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></div><div class="line">    Panel content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span>Panel footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--情景效果--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-success"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-info"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-warning"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-danger"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="Well效果"><a href="#Well效果" class="headerlink" title="Well效果"></a>Well效果</h2><p>把 Well 用在元素上，就能有嵌入（inset）的简单效果。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了Boostrap的全局样式和常用组件。&lt;/p&gt;
    
    </summary>
    
      <category term="boostrap" scheme="http://our-orginization.github.io/categories/boostrap/"/>
    
    
      <category term="bootstrap" scheme="http://our-orginization.github.io/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>git-pages</title>
    <link href="http://our-orginization.github.io/2017/09/14/gitbook/"/>
    <id>http://our-orginization.github.io/2017/09/14/gitbook/</id>
    <published>2017-09-13T16:00:00.000Z</published>
    <updated>2018-01-04T03:21:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文用来说明了如何从零开始基于gitpages搭建一个简易版的电子书。</p><a id="more"></a><h3 id="创建本地gitbook"><a href="#创建本地gitbook" class="headerlink" title="创建本地gitbook"></a>创建本地gitbook</h3><p>第一步，先安装脚手架工具</p><pre><code>npm install gitbook-cli -g</code></pre>然后，创建一个笔记文件夹<pre><code>mkdir daisy-note</code></pre>然后执行<pre><code>cd daisy-notegitbook init</code></pre>这样，可以生成这样一个gitbook项目，其中包含下面两个文件   <li>README.md 的内容会显示在书皮上</li><li>SUMMARY.md 是目录</li>### 启动服务器，查看和编辑书籍<pre><code>gitbook serve</code></pre>这样，可以启动一个服务器，然后到 localhost:4000 端口，就可以看到这本书了。可以修改 SUMMARY.md 来添加书籍目录<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section"># Summary</span></div><div class="line"></div><div class="line"><span class="bullet">* </span>[<span class="string">Introduction</span>](<span class="link">README.md</span>)</div><div class="line"><span class="bullet">* </span>[<span class="string">第一章：git</span>](<span class="link">git/index.md</span>)</div><div class="line">  - [<span class="string">第一节：如何创建这样一篇电子书</span>](<span class="link">git/gitbook.md</span>)</div></pre></td></tr></table></figure>创建 git 文件夹，然后里面就可以写笔记了。### 托管我的 gitbook首先到 github.com 上创建 daisy-note 仓库。  为了部署方便，我们把我们的 daisy-note 的内容结构稍微调整一下，把原有的所有内容都放到 content 文件夹中，也就是有这样的目录结构<pre><code>➜  daisy-note ls contentREADME.md  SUMMARY.md git➜  daisy-note</code></pre>然后，把当前项目变成一个 nodejs 的项目：<pre><code>cd daisy-notenpm init</code></pre>然后，package.json 中添加这些代码：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line"> "start": "gitbook serve ./content ./gh-pages",</div><div class="line"> "build": "gitbook build ./content ./gh-pages",</div><div class="line"> "deploy": "node ./scripts/deploy-gh-pages.js",</div><div class="line"> "publish": "npm run build &amp;&amp; npm run deploy",</div><div class="line"> "port": "lsof -i :35729"</div><div class="line">&#125;,</div></pre></td></tr></table></figure>有了上面的 npm 脚本之后，我们如果我想在本地 4000 端口查看本书，我需要运行<pre><code>npm start</code></pre>在准备上传之前，先来创建一个 .gitignore 文件，里面填写<pre><code>gh-pagesnode_modules</code></pre>然后，运行<pre><code>git initgit add -Agit commit -a -m"hello my book"git remote add origin git@github.com/DaisyGXL/daisy-note.gitgit push -u origin master</code></pre>上面这些完成后，gitbook 的原始代码就被安全的备份到 master 分支了。访问 https://github.com/DaisyGXL/daisy-note 可以看到这些内容。### 部署书籍到 gh-pages  这一步，可以手动做：<li>第一步：运行 npm run build ，来把 md 文件翻译成 html 放到 gh-pages 文件夹</li><li>第二步：拷贝 gh-pages 中的所有文件，到本仓库的 gh-pages 分支，然后上传</li><li>第三步：以后每次修改完都需要拷贝到 gh-pages 分支</li>手动做很麻烦，所以，我们采用一个 npm 包，来帮助我们完成上面的操作<pre><code>cd daisy-note/npm i --save gh-pages</code></pre>然后创建 my-note/scripts/deploy-gh-pages.js  里面的内容是：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">var</span> ghpages = <span class="built_in">require</span>(<span class="string">'gh-pages'</span>);</div><div class="line">main();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    ghpages.publish(<span class="string">'./gh-pages'</span>, <span class="built_in">console</span>.error.bind(<span class="built_in">console</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>这样，每次书稿有了修改，运行<pre><code>npm run publish</code></pre>就可以把书稿部署到 https://daisygxl.github.io/daisy-note如果本地书稿正在运行中，也可以执行下面命令将书稿进行部署<pre><code>npm run deploy</code></pre><p>** ps: 本文依据happypeter老师的教程整理</p><p>最近访客</p><div class="ds-recent-visitors" data-num-items="39" data-avatar-size="40" id="ds-recent-visitors"></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文用来说明了如何从零开始基于gitpages搭建一个简易版的电子书。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://our-orginization.github.io/categories/git/"/>
    
    
      <category term="blog" scheme="http://our-orginization.github.io/tags/blog/"/>
    
      <category term="电子书" scheme="http://our-orginization.github.io/tags/%E7%94%B5%E5%AD%90%E4%B9%A6/"/>
    
      <category term="git" scheme="http://our-orginization.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>mocha+supertest单元测试</title>
    <link href="http://our-orginization.github.io/2017/09/14/mocha+supertest%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://our-orginization.github.io/2017/09/14/mocha+supertest单元测试/</id>
    <published>2017-09-13T16:00:00.000Z</published>
    <updated>2018-02-08T07:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近一段时间刚刚接手了一个angular1.3前端+node服务器端多项目，作为一个刚刚入门node的新手，在熟悉了node的代码后便对已有的接口进行了单元测试用例的编写，此篇博客用于简单的记录。</p><a id="more"></a><h2 id="Mocha介绍"><a href="#Mocha介绍" class="headerlink" title="Mocha介绍"></a>Mocha介绍</h2><p>Mocha是非常流行JavaScript测试框架之一，在浏览器和Node环境都可以使用。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i mocha -g</div></pre></td></tr></table></figure><h2 id="简单测试脚本"><a href="#简单测试脚本" class="headerlink" title="简单测试脚本"></a>简单测试脚本</h2><p>1.首先写一个简单的例子，add.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function add(a, b)&#123; </div><div class="line">    return a+b; </div><div class="line">&#125; </div><div class="line">module.exports = add;</div></pre></td></tr></table></figure></p><p>2.新建测试脚本 add.test.js，一般命名规则测试脚本和原脚本同名，但是后缀名为.test.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> calcu = <span class="built_in">require</span>(<span class="string">'./add'</span>);</div><div class="line"><span class="keyword">let</span> should = <span class="built_in">require</span>(<span class="string">"should"</span>);</div><div class="line"></div><div class="line">describe(<span class="string">"add func test"</span>,() =&gt; &#123;</div><div class="line">    it(<span class="string">'2 add 2 should equal 4'</span>,() =&gt; &#123;</div><div class="line">      calcu.add(<span class="number">2</span>,<span class="number">2</span>).should.equal(<span class="number">4</span>)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>3.执行测试用例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha demo1/mocha demo1/calcu.test.js</div></pre></td></tr></table></figure></p><p>describe 表示测试套件，是一序列相关程序的测试<br>it表示单元测试(unit test)，也就是测试的最小单位。</p><h2 id="断言库"><a href="#断言库" class="headerlink" title="断言库"></a>断言库</h2><p>断言库可以理解为比较函数，也就是断言函数是否和预期一致，如果一致则表示测试通过，如果不一致表示测试失败，一个unit test里面可以包含多个断言语句。<br>本身mocha是不包含断言库的，所以必须引入第三方断言库，目前比较受欢迎的断言库  有 should.js、expect.js 、chai，而chai包含should、expect和assert三种风格，可扩展性比较强。<br>这里举例说明should断言方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">// 全等，相当于=== </div><div class="line">.exactly </div><div class="line">(5).should.be.exactly(5) </div><div class="line"></div><div class="line">// 对象存在 </div><div class="line">.ok </div><div class="line">true.should.be.ok; </div><div class="line">&apos;yay&apos;.should.be.ok; </div><div class="line">(1).should.be.ok; </div><div class="line">(&#123;&#125;).should.be.ok; </div><div class="line">false.should.not.be.ok; </div><div class="line"></div><div class="line">// 真 </div><div class="line">.true </div><div class="line">(5===5).should.be.true </div><div class="line">(err === null).should.be.true; </div><div class="line"></div><div class="line">// 相等,相当于 == </div><div class="line">.eql </div><div class="line">(&#123; foo: &apos;bar&apos; &#125;).should.eql(&#123; foo: &apos;bar&apos; &#125;); </div><div class="line">[1,2,3].should.eql([1,2,3]); </div><div class="line">// see next example it is correct, even if it is different types, but actual content the same </div><div class="line">[1, 2, 3].should.eql(&#123; &apos;0&apos;: 1, &apos;1&apos;: 2, &apos;2&apos;: 3 &#125;); </div><div class="line"></div><div class="line">// 非数字 </div><div class="line">.NaN </div><div class="line">(undefined + 0).should.be.NaN; </div><div class="line"></div><div class="line">// 判断类型 </div><div class="line">.typeof </div><div class="line">user.should.be.type(&apos;object&apos;); </div><div class="line">&apos;test&apos;.should.be.type(&apos;string&apos;); </div><div class="line"></div><div class="line">// 构造函数的一个实例 </div><div class="line">.instanceof user.should.be.an.instanceof(User); </div><div class="line">[].should.be.an.instanceOf(Array); </div><div class="line"></div><div class="line">// 存在 </div><div class="line">.exist() </div><div class="line">should.not.exist(err) </div><div class="line"></div><div class="line">//深度包含 </div><div class="line">.containDeep() </div><div class="line">[[1],[2],[3]].should.containDeep([[3]]); </div><div class="line">[[1],[2],[3, 4]].should.containDeep([[3]]); </div><div class="line">[&#123;a: &apos;a&apos;&#125;, &#123;b: &apos;b&apos;, c: &apos;c&apos;&#125;].should.containDeep([&#123;a: &apos;a&apos;&#125;]); </div><div class="line">[&#123;a: &apos;a&apos;&#125;, &#123;b: &apos;b&apos;, c: &apos;c&apos;&#125;].should.containDeep([&#123;b: &apos;b&apos;&#125;]); </div><div class="line"></div><div class="line">// 抛出异常 </div><div class="line">.throw()和throwError() </div><div class="line">(function()&#123; throw new Error(&apos;fail&apos;); &#125;).should.throw(); </div><div class="line">(function()&#123; throw new Error(&apos;fail&apos;); &#125;).should.throw(&apos;fail&apos;); </div><div class="line"></div><div class="line">// http响应的头部包含 </div><div class="line">.header </div><div class="line">res.should.have.header(&apos;content-length&apos;); </div><div class="line">res.should.have.header(&apos;Content-Length&apos;, &apos;123&apos;); </div><div class="line"></div><div class="line">// 包含或等价于 </div><div class="line">.containEql </div><div class="line">(&#123; b: 10 &#125;).should.containEql(&#123; b: 10 &#125;); </div><div class="line">([1, 2, &#123; a: 10 &#125;]).should.containEql(&#123; a: 10 &#125;);</div></pre></td></tr></table></figure></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="常规函数测试"><a href="#常规函数测试" class="headerlink" title="常规函数测试"></a>常规函数测试</h3><p>如上面的add.test.js</p><h3 id="异步函数测试"><a href="#异步函数测试" class="headerlink" title="异步函数测试"></a>异步函数测试</h3><p>新建文件book.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"></div><div class="line">exports.read = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</div><div class="line">        fs.readFile(<span class="string">'./book.txt'</span>, <span class="string">'utf-8'</span>, (err, result) =&gt; &#123;</div><div class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> cb(err);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"result"</span>,result);</div><div class="line">            cb(<span class="literal">null</span>, result);</div><div class="line">        &#125;) </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>新建文件book.test.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> book = <span class="built_in">require</span>(<span class="string">'./book'</span>);</div><div class="line"><span class="keyword">let</span> expect = <span class="built_in">require</span>(<span class="string">"chai"</span>).expect;</div><div class="line"><span class="keyword">let</span> book = <span class="built_in">require</span>(<span class="string">'./book'</span>);</div><div class="line"><span class="keyword">let</span> expect = <span class="built_in">require</span>(<span class="string">"chai"</span>).expect;</div><div class="line"></div><div class="line">describe(<span class="string">"async"</span>, () =&gt; &#123;</div><div class="line">  it(<span class="string">'read book async'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123;</div><div class="line">    book.read(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</div><div class="line">      expect(err).equal(<span class="literal">null</span>);</div><div class="line">      expect(result).to.be.a(<span class="string">'string'</span>);</div><div class="line">      done();</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>运行mocha book.test.js,我们会发现成功了，但是如果我们把book.js增加一个定时函数，改为如下例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line">exports.read = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        fs.readFile(<span class="string">'./book.txt'</span>, <span class="string">'utf-8'</span>, (err, result) =&gt; &#123;</div><div class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> cb(err);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"result"</span>,result);</div><div class="line">            cb(<span class="literal">null</span>, result);</div><div class="line">        &#125;) </div><div class="line">    &#125;, <span class="number">3000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>会发现报如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Timeout of 2000ms exceeded.</div></pre></td></tr></table></figure></p><p>这是因为mocha默认每个测试用例最多执行2000毫秒，如果到时没有得到结果，就报错。所以我们在进行异步操作的时候，需要额外指定timeout时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mocha --timeout 5000 book.test.js</div></pre></td></tr></table></figure></p><p>这样就保证测试用例成功。</p><h3 id="API测试"><a href="#API测试" class="headerlink" title="API测试"></a>API测试</h3><p>单单使用Mocha和should就几乎可以满足所有JavaScript函数的单元测试。但是对于Node应用而言，不仅仅是函数的集合，比如一个web应用的测试。这时候就需要配合一个http代理，完成Http请求和路由的测试。<br>Supertest是一个HTTP代理服务引擎，可以模拟一切HTTP请求行为。Supertest可以搭配任意的应用框架，从而进行应用的单元测试。<br>1.安装supertest<br><code>npm i supertest –save-dev</code><br>2.传入应用来实例化supertest<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> koa();</div><div class="line"><span class="keyword">let</span> server = app.listen(<span class="number">0</span>);</div><div class="line"><span class="keyword">this</span>.request = supertest(server);</div></pre></td></tr></table></figure></p><p>3.调用API进行测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//get</span></div><div class="line">describe(<span class="string">'GET /users'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    it(<span class="string">'respond with json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123; </div><div class="line">        request(app) </div><div class="line">        .get(<span class="string">'/user'</span>) </div><div class="line">        .set(<span class="string">'Accept'</span>, <span class="string">'application/json'</span>) </div><div class="line">        .expect(<span class="number">200</span>) </div><div class="line">        .end(<span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>)</span>&#123; </div><div class="line">            should.not.exist(err); </div><div class="line">            res.text.should.containEql(<span class="string">'success'</span>); </div><div class="line">            done(); </div><div class="line">        &#125;); </div><div class="line">    &#125;); </div><div class="line">&#125;);</div><div class="line"><span class="comment">//post</span></div><div class="line">describe(<span class="string">'test login'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    it(<span class="string">'login sucessfully'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">done</span>) </span>&#123; </div><div class="line">        request.post(<span class="string">'/user'</span>) </div><div class="line">        .send(&#123; <span class="attr">username</span>: <span class="string">'username'</span>, <span class="attr">password</span>: <span class="string">'123456'</span> &#125;) </div><div class="line">        .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123; </div><div class="line">            should.not.exists(err); </div><div class="line">            done(); </div><div class="line">        &#125;); </div><div class="line">    &#125;); </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>另外，可以通过.attach()方法测试文件上传。</p><h2 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行"></a>常用命令行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node ./node_modules/.bin/istanbul cover ./node_modules/mocha/bin/_mocha</div><div class="line">open coverage/lcov-report/index.html</div></pre></td></tr></table></figure><h2 id="生命钩子"><a href="#生命钩子" class="headerlink" title="生命钩子"></a>生命钩子</h2><p>mocha一共四个生命钩子<br>before()：在该区块的所有测试用例之前执行<br>after()：在该区块的所有测试用例之后执行<br>beforeEach()：在每个单元测试前执行<br>afterEach()：在每个单元测试后执行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一段时间刚刚接手了一个angular1.3前端+node服务器端多项目，作为一个刚刚入门node的新手，在熟悉了node的代码后便对已有的接口进行了单元测试用例的编写，此篇博客用于简单的记录。&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="http://our-orginization.github.io/categories/node/"/>
    
    
      <category term="node" scheme="http://our-orginization.github.io/tags/node/"/>
    
      <category term="单元测试" scheme="http://our-orginization.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="mocha" scheme="http://our-orginization.github.io/tags/mocha/"/>
    
      <category term="supertest" scheme="http://our-orginization.github.io/tags/supertest/"/>
    
  </entry>
  
  <entry>
    <title>ES6项目构建</title>
    <link href="http://our-orginization.github.io/2017/08/28/ES6%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    <id>http://our-orginization.github.io/2017/08/28/ES6项目构建/</id>
    <published>2017-08-27T16:00:00.000Z</published>
    <updated>2018-02-08T07:22:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要结合自己学习ES6的过程，说明了如何从零开始搭建一个ES6前端框架，并在大家都很关注的彩票业务中进行应用。</p><a id="more"></a><h1 id="前言：为什么要使用ES6？"><a href="#前言：为什么要使用ES6？" class="headerlink" title="前言：为什么要使用ES6？"></a>前言：为什么要使用ES6？</h1><p>ECMAScript6，又叫ECMAScript 2015，和ES3以及ES5的区别大概就像下面这个图一样，ES6相对早先几个版本有更加强大的生产力，能够提高开发效率。<br><img src="https://p0.meituan.net/dpnewvc/98edd093d4e832cd1c7bcfdfd2f699d8277917.png" width="1000px" height="300px"></p><h1 id="ES6一些比较好的特性"><a href="#ES6一些比较好的特性" class="headerlink" title="ES6一些比较好的特性"></a>ES6一些比较好的特性</h1><p><strong>1.默认参数</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">txt</span>) </span>&#123;</div><div class="line">    txt = txt || <span class="string">'hello world'</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">txt = <span class="string">'hello'</span></span>) </span>&#123;</div><div class="line">    <span class="comment">//减少了代码冗余</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>2.字符串模版</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5-引用underscore这个第三方库实现</span></div><div class="line"><span class="keyword">var</span> compiled = _.template(<span class="string">"hello: &lt;%= name %&gt;"</span>);</div><div class="line">compiled(&#123;<span class="attr">name</span>: <span class="string">'xueningjiejie'</span>&#125;);</div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">var</span> name = <span class="string">'xnjj'</span>;</div><div class="line"><span class="keyword">var</span> txt = <span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>;</div></pre></td></tr></table></figure></p><p>当然，这篇文章不是一篇讲解ES6特性的文章，因此不会一一陈述，那么ES6还有哪些特性呢？<br>1.解构赋值： 改变了参数赋值和变量赋值的形式，使赋值方式更加多样。<br>2.箭头函数<br>3.Set和Map<br>4.异步操作，如Promise()<br>5.类和对象<br>6.模块化<br>…<br>想要了解更多具体特性，请认真研读阮一峰的<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a> </p><h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h1><p>ES6是无法直接在浏览器中运行的，因此想要实现一个ES6工程并在浏览器中看到实现效果，需要先进行项目构建。</p><p><strong>1 基础架构</strong><br><img src="https://p1.meituan.net/dpnewvc/dcb6af4925ecdda34fa5ab6452b969ad99150.png" width="800px" height="350px"></p><p>模块说明：</p><ul><li>业务逻辑<br>  写页面，表现为html,js,css，通过js实现和服务器端进行交互</li><li>自动构建-编译<br>  把ES6的代码根据需要编译成ES5或ES3（需要兼容IE8以下低级浏览器的时候）的代码。         </li><li>自动构建-辅助<br>  实现修改代码自动刷新网页（livereload）  文件合并资源压缩（js,css,图片→base64编码）</li><li>服务接口<br>  后端服务器提供数据和接口</li><li>mock接口<br>  用于开发阶段纯前端的交互测试</li></ul><p><strong>2 任务自动化（gulp）</strong><br>定义：减少人工操作，让电脑自动监听操作，记性响应，提高效率。<br>作用：自动化处理sass／less转化为css的编译过程，文件合并，模块依赖，文件压缩。<br>gulp：自动化工具，替代之前流行grant，通过stream流操作使得级联操作非常块，完成任务自动化，顺畅工作流，由nodejs开发。</p><p><strong>gulp</strong> 使用说明</p><pre>(全局安装）<code>$ npm instal --global gulp</code></pre><pre>(项目安装）<code>$ npm install --save-dev gulp</code></pre><pre>(根目录创建gulpfile.js/gulpfile.babel.js）<code>$ touch gulpfile.js</code></pre><p>gulpfile.js文件内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><pre>(运行）<code>$ gulp</code></pre><pre>(运行并监听）<code>$ gulp --watch</code></pre><p>具体使用说明可以阅读<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">gulp中文文档</a></p><p><strong>3 编译工具（ babel, webpack ）</strong> </p><p>babel：js编译器，把ES6代码编译成ES5代码。<br>webpack：处理模块化，项目依赖的关系，import实现。<br>webpack-stream—webpack：对gulp对支持。</p><p><strong>4 代码实现</strong> </p><p>1.创建ES6前端工程,并创建三个并行模块：</p><ul><li><strong>app</strong></li><li><strong>server</strong></li><li><strong>tasks</strong></li></ul><p>2.app目录为前端项目代码，包含<strong>html</strong>（模板页面）,<strong>js</strong>（交互实现）,<strong>css</strong>（样式）<br><em>ps.1:这里的模版页面创建的不是html页面，而是ejs文件，是因为实战工程的服务器端代码是通过express这个nodejs框架创建的。</em><br><em>ps.2:js目录下的index.js文件为入口脚本文件，同样的views目录下的index.ejs为入口模板文件。</em></p><p>3.server为服务器端目录，这里面我们使用<strong>nodejs</strong>来写服务器端代码。<br>在server目录下执行下面命令,在当前目录使用ejs模板引擎,如果执行express出错，先检查下是否已经安装nodejs，并install了express脚手架。</p><pre><code>express -e .npm install</code></pre><p>4.task为构建工具目录</p><ul><li>util–放置常见脚本的目录<br>   args.js–定义gulp命令行脚本 .option就是定义gulp -<em>*</em>中对内容  .argv表示输入对命令行以字符串形式进行解析</li><li>scripts.js–构建脚本，通过gulp对js文件进行重命名，压缩和存放  脚本服务文件</li><li>pages.js–模板脚本</li><li>server.js–服务器脚本</li><li>css.js–监听样式脚本</li><li>browser.js–浏览器自动监听变化并编译到指定文件夹</li><li>clean.js–编译前情况文件夹</li><li>build.js–把所有脚本关联起来，编排执行顺序</li><li>default.js–默认执行的任务</li></ul><p>5.使用npm自动生成package.json文件，有这个文件就可以使用npm来获取依赖包了</p><pre><code>npm init</code></pre><p>6.创建设置babel编译工具的文件.babelrc</p><p>7.创建gulp的配置文件gulpfile.babel.js</p><p><em>ps.2:官网上给的是创建gulpfile.js,是ES5使用的，但是当前工程是ES6工程，使用官网给出的文件名运行gulp命令会报错。</em></p><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="strong">**最终目录结构**</span></div><div class="line">app</div><div class="line"><span class="code">    js--交互实现</span></div><div class="line"><span class="code">        class--类</span></div><div class="line"><span class="code">            test.js</span></div><div class="line"><span class="code">        index.js</span></div><div class="line"><span class="code">    css--样式</span></div><div class="line"><span class="code">    views--模板页面</span></div><div class="line"><span class="code">        error.ejs</span></div><div class="line"><span class="code">        index.ejs</span></div><div class="line">server</div><div class="line">tasks</div><div class="line"><span class="code">    util</span></div><div class="line"><span class="code">        args.js</span></div><div class="line"><span class="code">    scripts.js</span></div><div class="line"><span class="code">    pages.js</span></div><div class="line"><span class="code">    server.js</span></div><div class="line"><span class="code">    css.js</span></div><div class="line"><span class="code">    browser.js</span></div><div class="line"><span class="code">    clean.js</span></div><div class="line"><span class="code">    build.js</span></div><div class="line"><span class="code">    default.js</span></div><div class="line">package.json</div><div class="line">.babelrc</div><div class="line">gulpfile.babel.js</div></pre></td></tr></table></figure><p>这里没有粘贴每个配置文件的内容，若需要可以克隆<a href="https://github.com/DaisyGXL/Lemmon-tree.git" target="_blank" rel="external">https://github.com/DaisyGXL/Lemmon-tree.git</a> 仓库的地址获取搭建好的工程es6-project查看具体配置文件，其中我对每个文件的配置和依赖包的用处进行了注释说明。</p><p>8.通过<code>npm install <em>*</em> –save-dev</code>命令把涉及到的依赖包依赖到本地，并添加到package.json文件中，可以通过<code>gulp</code>命令检查是否有使用的依赖包没有更新到本地,直到命令行输出下面内容为止，ES6工程基本搭建完成。</p><p><pre><code>➜  es6 git:(master) gulp<br>[16:53:30] Requiring external module babel-register<br>[16:53:31] Using gulpfile ~/works/es6/gulpfile.babel.js<br>[16:53:31] Starting ‘build’…<br>[16:53:31] Starting ‘clean’…<br>[16:53:31] Finished ‘clean’ after 10 ms<br>[16:53:31] Starting ‘css’…<br>[16:53:31] Finished ‘css’ after 16 ms<br>[16:53:31] Starting ‘pages’…<br>[16:53:31] Finished ‘pages’ after 17 ms<br>[16:53:31] Starting ‘scripts’…<br>[16:53:31] Version: webpack 3.5.5<br>   Asset     Size  Chunks             Chunk Names<br>index.js  2.94 kB       0  [emitted]  index<br>[16:53:31] Finished ‘scripts’ after 290 ms<br>[16:53:31] Starting ‘browser’…<br>[16:53:31] Finished ‘browser’ after 92 μs<br>[16:53:31] Starting ‘serve’…<br>[16:53:31] Finished ‘serve’ after 77 μs<br>[16:53:31] Finished ‘build’ after 338 ms<br>[16:53:31] Starting ‘default’…<br>[16:53:31] Finished ‘default’ after 25 μs</code></pre><br>从输出可以看出，gulp执行的顺序，build –&gt; clean –&gt; css –&gt; pages –&gt; scripts，那么为什么会按照这样的顺序执行呢？<br>我们前面创建了一个gulpfile.babel.js，在文件中指定了gulp运行时，先进入task目录。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requireDir(<span class="string">'./tasks'</span>);</div></pre></td></tr></table></figure></p><p>那么，gulp 会进入task目录寻找一个叫做default.js的文件,该文件中指定了启动时默认要执行的脚本build，也就是编译脚本。在build.js这个文件中，我们来编排编译步骤，即是上面运行的这种步骤。<br><img src="https://p1.meituan.net/dpnewvc/ba5a70a25d75752961db41f1b315cb7627416.png" width="520px" height="260px"><br>9.无报错后，通过gulp –watch使服务处于监听状态,运行出现最后一行，则启动并监听成功。</p><p><pre><code>➜  es6 git:(master) gulp –watch<br>[17:02:49] Requiring external module babel-register<br>[17:02:50] Using gulpfile ~/works/es6/gulpfile.babel.js<br>[17:02:50] Starting ‘build’…<br>[17:02:50] Starting ‘clean’…<br>[17:02:50] Finished ‘clean’ after 9.31 ms<br>[17:02:50] Starting ‘css’…<br>[17:02:50] Finished ‘css’ after 16 ms<br>[17:02:50] Starting ‘pages’…<br>[17:02:50] Finished ‘pages’ after 16 ms<br>[17:02:50] Starting ‘scripts’…<br>[17:02:50] Version: webpack 3.5.5<br>   Asset     Size  Chunks             Chunk Names<br>index.js  2.94 kB       0  [emitted]  index<br>[17:02:50] Finished ‘scripts’ after 281 ms<br>[17:02:50] Starting ‘browser’…<br>[17:02:50] Starting ‘serve’…<br>livereload[tiny-lr] listening on 35729 …</code></pre></p><p>至此，前端开发框架已经搭建好了，编辑index.ejs模板页面显示内容，通过localhost：3000访问</p><p>然而，我们发现，有一些ES6的项目网页依赖了livereload包却并不能自动进行刷新，仍然需要手动去刷新，也就是自动构建中的辅助功能未得到实现。<br>那么检查一下在server目录中的app.js中是否缺少这样一行代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="built_in">require</span>(<span class="string">'connect-livereload'</span>)());</div></pre></td></tr></table></figure></p><p>最后，因为学习那段时间身边的小伙伴们都很沉迷彩票，就简单做了个彩票业务的demo，有些逻辑还没有写完，后面会不断完善。<br>git仓库地址：<a href="https://github.com/DaisyGXL/Lemmon-tree.git" target="_blank" rel="external">https://github.com/DaisyGXL/Lemmon-tree.git</a>  工程名：cp-project</p><p>最近访客</p><div class="ds-recent-visitors" data-num-items="39" data-avatar-size="40" id="ds-recent-visitors"></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要结合自己学习ES6的过程，说明了如何从零开始搭建一个ES6前端框架，并在大家都很关注的彩票业务中进行应用。&lt;/p&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://our-orginization.github.io/categories/ES6/"/>
    
    
      <category term="javascript" scheme="http://our-orginization.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="http://our-orginization.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>基于Hexo和GitPages搭建个人博客</title>
    <link href="http://our-orginization.github.io/2017/08/28/%E5%9F%BA%E4%BA%8EHexo%E5%92%8CGitPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://our-orginization.github.io/2017/08/28/基于Hexo和GitPages搭建个人博客/</id>
    <published>2017-08-27T16:00:00.000Z</published>
    <updated>2018-02-08T07:21:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了如何基于Hexo生成一个静态博客站点，并通过github发布。</p><a id="more"></a><h1 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h1><blockquote><p>A fast, simple &amp; powerful blog framework.–Hexo官网</p></blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。它有下面几个特点：</p><ul><li>超快速度<br>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li><li>支持Markdown<br>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</li><li>一键部署<br>只需一条指令即可部署到Github Pages，或其他网站</li><li>丰富的插件<br>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。  </li></ul><p>通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li>Node.js</li><li>Git</li></ul><p>网上有很多的安装教程，这里不做赘述。<br>接下来只需要使用 npm 即可完成 Hexo 的安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p><p>安装 Hexo 完成后，我们首先需要为我们的项目创建一个指定文件夹，在指定文件夹中执行下列命令， Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure></p><p>等待安装，安装完成后，<span id="inline-green">指定文件夹</span> 的目录如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└──</div></pre></td></tr></table></figure></p><p>继续执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo s --debug</div></pre></td></tr></table></figure></p><p>Hexo 将 source 文件夹中除 <em>posts 文件夹之外，开头命名为 </em>(下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。<br>这个时候，我们在浏览器中访问 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> ，就可以看到基于 Hexo 的默认主题的原型。</p><h1 id="主题扩展功能"><a href="#主题扩展功能" class="headerlink" title="主题扩展功能"></a>主题扩展功能</h1><p>首先，我们需要明白：</p><blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml 。其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>  我们约定，将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong><br>  可以通过hexo的官网选择喜欢的模板进行使用。</p></blockquote><h1 id="发布到github-io"><a href="#发布到github-io" class="headerlink" title="发布到github.io"></a>发布到github.io</h1><p>在github中创建仓库，命名方式为<strong>用户名.github.io</strong>，一定要以这种方式命名，并且每个github账户只能有一个pages。在站点配置文件中增加发布仓库:<br><figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/DaisyGXL/DaisyGXL.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure></p><p>完成编译发布过程。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了如何基于Hexo生成一个静态博客站点，并通过github发布。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://our-orginization.github.io/categories/git/"/>
    
    
      <category term="blog" scheme="http://our-orginization.github.io/tags/blog/"/>
    
      <category term="github" scheme="http://our-orginization.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://our-orginization.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
